# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class GroupAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, title=None, description=None, status='ACTIVE', users=None, created_at=None, updated_at=None):
        """
        GroupAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'title': 'str',
            'description': 'str',
            'status': 'str',
            'users': 'list[str]',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'title': 'title',
            'description': 'description',
            'status': 'status',
            'users': 'users',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._code = code
        self._title = title
        self._description = description
        self._status = status
        self._users = users
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def code(self):
        """
        Gets the code of this GroupAttributes.


        :return: The code of this GroupAttributes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this GroupAttributes.


        :param code: The code of this GroupAttributes.
        :type: str
        """

        self._code = code

    @property
    def title(self):
        """
        Gets the title of this GroupAttributes.


        :return: The title of this GroupAttributes.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this GroupAttributes.


        :param title: The title of this GroupAttributes.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """
        Gets the description of this GroupAttributes.


        :return: The description of this GroupAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GroupAttributes.


        :param description: The description of this GroupAttributes.
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """
        Gets the status of this GroupAttributes.


        :return: The status of this GroupAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GroupAttributes.


        :param status: The status of this GroupAttributes.
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def users(self):
        """
        Gets the users of this GroupAttributes.
        User ID's array

        :return: The users of this GroupAttributes.
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this GroupAttributes.
        User ID's array

        :param users: The users of this GroupAttributes.
        :type: list[str]
        """

        self._users = users

    @property
    def created_at(self):
        """
        Gets the created_at of this GroupAttributes.


        :return: The created_at of this GroupAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this GroupAttributes.


        :param created_at: The created_at of this GroupAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this GroupAttributes.


        :return: The updated_at of this GroupAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this GroupAttributes.


        :param updated_at: The updated_at of this GroupAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
