# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TaskAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, process_id=None, type='NORMAL', assign_type='CYCLIC', priority_variable=None, assign_variable=None, group_variable=None, mi_instance_variable=None, mi_complete_variable=None, transfer_fly=False, can_upload=False, view_upload=False, view_additional_documentation=False, start=False, send_last_email=True, derivation_screen_tpl=None, selfservice_timeout=None, selfservice_time=None, selfservice_time_unit=None, selfservice_execution=None, last_assigned_user_id=None, script=None, created_at=None, updated_at=None):
        """
        TaskAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'process_id': 'str',
            'type': 'str',
            'assign_type': 'str',
            'priority_variable': 'str',
            'assign_variable': 'str',
            'group_variable': 'str',
            'mi_instance_variable': 'str',
            'mi_complete_variable': 'str',
            'transfer_fly': 'bool',
            'can_upload': 'bool',
            'view_upload': 'bool',
            'view_additional_documentation': 'bool',
            'start': 'bool',
            'send_last_email': 'bool',
            'derivation_screen_tpl': 'str',
            'selfservice_timeout': 'int',
            'selfservice_time': 'str',
            'selfservice_time_unit': 'str',
            'selfservice_execution': 'str',
            'last_assigned_user_id': 'str',
            'script': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'process_id': 'process_id',
            'type': 'type',
            'assign_type': 'assign_type',
            'priority_variable': 'priority_variable',
            'assign_variable': 'assign_variable',
            'group_variable': 'group_variable',
            'mi_instance_variable': 'mi_instance_variable',
            'mi_complete_variable': 'mi_complete_variable',
            'transfer_fly': 'transfer_fly',
            'can_upload': 'can_upload',
            'view_upload': 'view_upload',
            'view_additional_documentation': 'view_additional_documentation',
            'start': 'start',
            'send_last_email': 'send_last_email',
            'derivation_screen_tpl': 'derivation_screen_tpl',
            'selfservice_timeout': 'selfservice_timeout',
            'selfservice_time': 'selfservice_time',
            'selfservice_time_unit': 'selfservice_time_unit',
            'selfservice_execution': 'selfservice_execution',
            'last_assigned_user_id': 'last_assigned_user_id',
            'script': 'script',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._name = name
        self._description = description
        self._process_id = process_id
        self._type = type
        self._assign_type = assign_type
        self._priority_variable = priority_variable
        self._assign_variable = assign_variable
        self._group_variable = group_variable
        self._mi_instance_variable = mi_instance_variable
        self._mi_complete_variable = mi_complete_variable
        self._transfer_fly = transfer_fly
        self._can_upload = can_upload
        self._view_upload = view_upload
        self._view_additional_documentation = view_additional_documentation
        self._start = start
        self._send_last_email = send_last_email
        self._derivation_screen_tpl = derivation_screen_tpl
        self._selfservice_timeout = selfservice_timeout
        self._selfservice_time = selfservice_time
        self._selfservice_time_unit = selfservice_time_unit
        self._selfservice_execution = selfservice_execution
        self._last_assigned_user_id = last_assigned_user_id
        self._script = script
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def name(self):
        """
        Gets the name of this TaskAttributes.


        :return: The name of this TaskAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TaskAttributes.


        :param name: The name of this TaskAttributes.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this TaskAttributes.


        :return: The description of this TaskAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TaskAttributes.


        :param description: The description of this TaskAttributes.
        :type: str
        """

        self._description = description

    @property
    def process_id(self):
        """
        Gets the process_id of this TaskAttributes.


        :return: The process_id of this TaskAttributes.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this TaskAttributes.


        :param process_id: The process_id of this TaskAttributes.
        :type: str
        """

        self._process_id = process_id

    @property
    def type(self):
        """
        Gets the type of this TaskAttributes.


        :return: The type of this TaskAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TaskAttributes.


        :param type: The type of this TaskAttributes.
        :type: str
        """
        allowed_values = ["NORMAL", "ADHOC", "SUBPROCESS", "HIDDEN", "GATEWAYTOGATEWAY", "WEBENTRYEVENT", "END-MESSAGE-EVENT", "START-MESSAGE-EVENT", "INTERMEDIATE-THROW-MESSAGE-EVENT", "INTERMEDIATE-CATCH-MESSAGE-EVENT", "SCRIPT-TASK", "SERVICE-TASK", "USER-TASK", "START-TIMER-EVENT", "INTERMEDIATE-CATCH-TIMER-EVENT", "END-EMAIL-EVENT", "INTERMEDIATE-THROW-EMAIL-EVENT"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def assign_type(self):
        """
        Gets the assign_type of this TaskAttributes.


        :return: The assign_type of this TaskAttributes.
        :rtype: str
        """
        return self._assign_type

    @assign_type.setter
    def assign_type(self, assign_type):
        """
        Sets the assign_type of this TaskAttributes.


        :param assign_type: The assign_type of this TaskAttributes.
        :type: str
        """
        allowed_values = ["CYCLIC", "MANUAL", "EVALUATE", "REPORT_TO", "SELF_SERVICE", "STATIC_MI", "CANCEL_MI", "MULTIPLE_INSTANCE", "MULTIPLE_INSTANCE_VALUE_BASED"]
        if assign_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assign_type` ({0}), must be one of {1}"
                .format(assign_type, allowed_values)
            )

        self._assign_type = assign_type

    @property
    def priority_variable(self):
        """
        Gets the priority_variable of this TaskAttributes.


        :return: The priority_variable of this TaskAttributes.
        :rtype: str
        """
        return self._priority_variable

    @priority_variable.setter
    def priority_variable(self, priority_variable):
        """
        Sets the priority_variable of this TaskAttributes.


        :param priority_variable: The priority_variable of this TaskAttributes.
        :type: str
        """

        self._priority_variable = priority_variable

    @property
    def assign_variable(self):
        """
        Gets the assign_variable of this TaskAttributes.


        :return: The assign_variable of this TaskAttributes.
        :rtype: str
        """
        return self._assign_variable

    @assign_variable.setter
    def assign_variable(self, assign_variable):
        """
        Sets the assign_variable of this TaskAttributes.


        :param assign_variable: The assign_variable of this TaskAttributes.
        :type: str
        """

        self._assign_variable = assign_variable

    @property
    def group_variable(self):
        """
        Gets the group_variable of this TaskAttributes.


        :return: The group_variable of this TaskAttributes.
        :rtype: str
        """
        return self._group_variable

    @group_variable.setter
    def group_variable(self, group_variable):
        """
        Sets the group_variable of this TaskAttributes.


        :param group_variable: The group_variable of this TaskAttributes.
        :type: str
        """

        self._group_variable = group_variable

    @property
    def mi_instance_variable(self):
        """
        Gets the mi_instance_variable of this TaskAttributes.


        :return: The mi_instance_variable of this TaskAttributes.
        :rtype: str
        """
        return self._mi_instance_variable

    @mi_instance_variable.setter
    def mi_instance_variable(self, mi_instance_variable):
        """
        Sets the mi_instance_variable of this TaskAttributes.


        :param mi_instance_variable: The mi_instance_variable of this TaskAttributes.
        :type: str
        """

        self._mi_instance_variable = mi_instance_variable

    @property
    def mi_complete_variable(self):
        """
        Gets the mi_complete_variable of this TaskAttributes.


        :return: The mi_complete_variable of this TaskAttributes.
        :rtype: str
        """
        return self._mi_complete_variable

    @mi_complete_variable.setter
    def mi_complete_variable(self, mi_complete_variable):
        """
        Sets the mi_complete_variable of this TaskAttributes.


        :param mi_complete_variable: The mi_complete_variable of this TaskAttributes.
        :type: str
        """

        self._mi_complete_variable = mi_complete_variable

    @property
    def transfer_fly(self):
        """
        Gets the transfer_fly of this TaskAttributes.


        :return: The transfer_fly of this TaskAttributes.
        :rtype: bool
        """
        return self._transfer_fly

    @transfer_fly.setter
    def transfer_fly(self, transfer_fly):
        """
        Sets the transfer_fly of this TaskAttributes.


        :param transfer_fly: The transfer_fly of this TaskAttributes.
        :type: bool
        """

        self._transfer_fly = transfer_fly

    @property
    def can_upload(self):
        """
        Gets the can_upload of this TaskAttributes.


        :return: The can_upload of this TaskAttributes.
        :rtype: bool
        """
        return self._can_upload

    @can_upload.setter
    def can_upload(self, can_upload):
        """
        Sets the can_upload of this TaskAttributes.


        :param can_upload: The can_upload of this TaskAttributes.
        :type: bool
        """

        self._can_upload = can_upload

    @property
    def view_upload(self):
        """
        Gets the view_upload of this TaskAttributes.


        :return: The view_upload of this TaskAttributes.
        :rtype: bool
        """
        return self._view_upload

    @view_upload.setter
    def view_upload(self, view_upload):
        """
        Sets the view_upload of this TaskAttributes.


        :param view_upload: The view_upload of this TaskAttributes.
        :type: bool
        """

        self._view_upload = view_upload

    @property
    def view_additional_documentation(self):
        """
        Gets the view_additional_documentation of this TaskAttributes.


        :return: The view_additional_documentation of this TaskAttributes.
        :rtype: bool
        """
        return self._view_additional_documentation

    @view_additional_documentation.setter
    def view_additional_documentation(self, view_additional_documentation):
        """
        Sets the view_additional_documentation of this TaskAttributes.


        :param view_additional_documentation: The view_additional_documentation of this TaskAttributes.
        :type: bool
        """

        self._view_additional_documentation = view_additional_documentation

    @property
    def start(self):
        """
        Gets the start of this TaskAttributes.


        :return: The start of this TaskAttributes.
        :rtype: bool
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this TaskAttributes.


        :param start: The start of this TaskAttributes.
        :type: bool
        """

        self._start = start

    @property
    def send_last_email(self):
        """
        Gets the send_last_email of this TaskAttributes.


        :return: The send_last_email of this TaskAttributes.
        :rtype: bool
        """
        return self._send_last_email

    @send_last_email.setter
    def send_last_email(self, send_last_email):
        """
        Sets the send_last_email of this TaskAttributes.


        :param send_last_email: The send_last_email of this TaskAttributes.
        :type: bool
        """

        self._send_last_email = send_last_email

    @property
    def derivation_screen_tpl(self):
        """
        Gets the derivation_screen_tpl of this TaskAttributes.


        :return: The derivation_screen_tpl of this TaskAttributes.
        :rtype: str
        """
        return self._derivation_screen_tpl

    @derivation_screen_tpl.setter
    def derivation_screen_tpl(self, derivation_screen_tpl):
        """
        Sets the derivation_screen_tpl of this TaskAttributes.


        :param derivation_screen_tpl: The derivation_screen_tpl of this TaskAttributes.
        :type: str
        """

        self._derivation_screen_tpl = derivation_screen_tpl

    @property
    def selfservice_timeout(self):
        """
        Gets the selfservice_timeout of this TaskAttributes.


        :return: The selfservice_timeout of this TaskAttributes.
        :rtype: int
        """
        return self._selfservice_timeout

    @selfservice_timeout.setter
    def selfservice_timeout(self, selfservice_timeout):
        """
        Sets the selfservice_timeout of this TaskAttributes.


        :param selfservice_timeout: The selfservice_timeout of this TaskAttributes.
        :type: int
        """

        self._selfservice_timeout = selfservice_timeout

    @property
    def selfservice_time(self):
        """
        Gets the selfservice_time of this TaskAttributes.


        :return: The selfservice_time of this TaskAttributes.
        :rtype: str
        """
        return self._selfservice_time

    @selfservice_time.setter
    def selfservice_time(self, selfservice_time):
        """
        Sets the selfservice_time of this TaskAttributes.


        :param selfservice_time: The selfservice_time of this TaskAttributes.
        :type: str
        """

        self._selfservice_time = selfservice_time

    @property
    def selfservice_time_unit(self):
        """
        Gets the selfservice_time_unit of this TaskAttributes.


        :return: The selfservice_time_unit of this TaskAttributes.
        :rtype: str
        """
        return self._selfservice_time_unit

    @selfservice_time_unit.setter
    def selfservice_time_unit(self, selfservice_time_unit):
        """
        Sets the selfservice_time_unit of this TaskAttributes.


        :param selfservice_time_unit: The selfservice_time_unit of this TaskAttributes.
        :type: str
        """

        self._selfservice_time_unit = selfservice_time_unit

    @property
    def selfservice_execution(self):
        """
        Gets the selfservice_execution of this TaskAttributes.


        :return: The selfservice_execution of this TaskAttributes.
        :rtype: str
        """
        return self._selfservice_execution

    @selfservice_execution.setter
    def selfservice_execution(self, selfservice_execution):
        """
        Sets the selfservice_execution of this TaskAttributes.


        :param selfservice_execution: The selfservice_execution of this TaskAttributes.
        :type: str
        """

        self._selfservice_execution = selfservice_execution

    @property
    def last_assigned_user_id(self):
        """
        Gets the last_assigned_user_id of this TaskAttributes.


        :return: The last_assigned_user_id of this TaskAttributes.
        :rtype: str
        """
        return self._last_assigned_user_id

    @last_assigned_user_id.setter
    def last_assigned_user_id(self, last_assigned_user_id):
        """
        Sets the last_assigned_user_id of this TaskAttributes.


        :param last_assigned_user_id: The last_assigned_user_id of this TaskAttributes.
        :type: str
        """

        self._last_assigned_user_id = last_assigned_user_id

    @property
    def script(self):
        """
        Gets the script of this TaskAttributes.


        :return: The script of this TaskAttributes.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """
        Sets the script of this TaskAttributes.


        :param script: The script of this TaskAttributes.
        :type: str
        """

        self._script = script

    @property
    def created_at(self):
        """
        Gets the created_at of this TaskAttributes.


        :return: The created_at of this TaskAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this TaskAttributes.


        :param created_at: The created_at of this TaskAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this TaskAttributes.


        :return: The updated_at of this TaskAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this TaskAttributes.


        :param updated_at: The updated_at of this TaskAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
