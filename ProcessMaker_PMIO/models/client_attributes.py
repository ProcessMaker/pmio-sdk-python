# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ClientAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, secret=None, name=None, personal_access_client=None, password_client=None, revoked=None, created_at=None, updated_at=None):
        """
        ClientAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'secret': 'str',
            'name': 'str',
            'personal_access_client': 'bool',
            'password_client': 'bool',
            'revoked': 'bool',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'secret': 'secret',
            'name': 'name',
            'personal_access_client': 'personal_access_client',
            'password_client': 'password_client',
            'revoked': 'revoked',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._secret = secret
        self._name = name
        self._personal_access_client = personal_access_client
        self._password_client = password_client
        self._revoked = revoked
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def secret(self):
        """
        Gets the secret of this ClientAttributes.


        :return: The secret of this ClientAttributes.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """
        Sets the secret of this ClientAttributes.


        :param secret: The secret of this ClientAttributes.
        :type: str
        """

        self._secret = secret

    @property
    def name(self):
        """
        Gets the name of this ClientAttributes.


        :return: The name of this ClientAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClientAttributes.


        :param name: The name of this ClientAttributes.
        :type: str
        """

        self._name = name

    @property
    def personal_access_client(self):
        """
        Gets the personal_access_client of this ClientAttributes.


        :return: The personal_access_client of this ClientAttributes.
        :rtype: bool
        """
        return self._personal_access_client

    @personal_access_client.setter
    def personal_access_client(self, personal_access_client):
        """
        Sets the personal_access_client of this ClientAttributes.


        :param personal_access_client: The personal_access_client of this ClientAttributes.
        :type: bool
        """

        self._personal_access_client = personal_access_client

    @property
    def password_client(self):
        """
        Gets the password_client of this ClientAttributes.


        :return: The password_client of this ClientAttributes.
        :rtype: bool
        """
        return self._password_client

    @password_client.setter
    def password_client(self, password_client):
        """
        Sets the password_client of this ClientAttributes.


        :param password_client: The password_client of this ClientAttributes.
        :type: bool
        """

        self._password_client = password_client

    @property
    def revoked(self):
        """
        Gets the revoked of this ClientAttributes.


        :return: The revoked of this ClientAttributes.
        :rtype: bool
        """
        return self._revoked

    @revoked.setter
    def revoked(self, revoked):
        """
        Sets the revoked of this ClientAttributes.


        :param revoked: The revoked of this ClientAttributes.
        :type: bool
        """

        self._revoked = revoked

    @property
    def created_at(self):
        """
        Gets the created_at of this ClientAttributes.


        :return: The created_at of this ClientAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ClientAttributes.


        :param created_at: The created_at of this ClientAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ClientAttributes.


        :return: The updated_at of this ClientAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ClientAttributes.


        :param updated_at: The updated_at of this ClientAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
