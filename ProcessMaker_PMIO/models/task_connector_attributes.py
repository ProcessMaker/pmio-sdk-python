# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TaskConnectorAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, task_id=None, connector_class='HttpConnector', input_parameters='[]', output_parameters='[]', async_before=None, created_at=None, updated_at=None):
        """
        TaskConnectorAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'task_id': 'int',
            'connector_class': 'str',
            'input_parameters': 'str',
            'output_parameters': 'str',
            'async_before': 'bool',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'task_id': 'task_id',
            'connector_class': 'connector_class',
            'input_parameters': 'input_parameters',
            'output_parameters': 'output_parameters',
            'async_before': 'async_before',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._task_id = task_id
        self._connector_class = connector_class
        self._input_parameters = input_parameters
        self._output_parameters = output_parameters
        self._async_before = async_before
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def task_id(self):
        """
        Gets the task_id of this TaskConnectorAttributes.


        :return: The task_id of this TaskConnectorAttributes.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """
        Sets the task_id of this TaskConnectorAttributes.


        :param task_id: The task_id of this TaskConnectorAttributes.
        :type: int
        """

        self._task_id = task_id

    @property
    def connector_class(self):
        """
        Gets the connector_class of this TaskConnectorAttributes.


        :return: The connector_class of this TaskConnectorAttributes.
        :rtype: str
        """
        return self._connector_class

    @connector_class.setter
    def connector_class(self, connector_class):
        """
        Sets the connector_class of this TaskConnectorAttributes.


        :param connector_class: The connector_class of this TaskConnectorAttributes.
        :type: str
        """

        self._connector_class = connector_class

    @property
    def input_parameters(self):
        """
        Gets the input_parameters of this TaskConnectorAttributes.


        :return: The input_parameters of this TaskConnectorAttributes.
        :rtype: str
        """
        return self._input_parameters

    @input_parameters.setter
    def input_parameters(self, input_parameters):
        """
        Sets the input_parameters of this TaskConnectorAttributes.


        :param input_parameters: The input_parameters of this TaskConnectorAttributes.
        :type: str
        """

        self._input_parameters = input_parameters

    @property
    def output_parameters(self):
        """
        Gets the output_parameters of this TaskConnectorAttributes.


        :return: The output_parameters of this TaskConnectorAttributes.
        :rtype: str
        """
        return self._output_parameters

    @output_parameters.setter
    def output_parameters(self, output_parameters):
        """
        Sets the output_parameters of this TaskConnectorAttributes.


        :param output_parameters: The output_parameters of this TaskConnectorAttributes.
        :type: str
        """

        self._output_parameters = output_parameters

    @property
    def async_before(self):
        """
        Gets the async_before of this TaskConnectorAttributes.


        :return: The async_before of this TaskConnectorAttributes.
        :rtype: bool
        """
        return self._async_before

    @async_before.setter
    def async_before(self, async_before):
        """
        Sets the async_before of this TaskConnectorAttributes.


        :param async_before: The async_before of this TaskConnectorAttributes.
        :type: bool
        """

        self._async_before = async_before

    @property
    def created_at(self):
        """
        Gets the created_at of this TaskConnectorAttributes.


        :return: The created_at of this TaskConnectorAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this TaskConnectorAttributes.


        :param created_at: The created_at of this TaskConnectorAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this TaskConnectorAttributes.


        :return: The updated_at of this TaskConnectorAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this TaskConnectorAttributes.


        :param updated_at: The updated_at of this TaskConnectorAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
