# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Pagination(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, total=None, count=None, per_page=None, current_page=None, total_pages=None, links=None):
        """
        Pagination - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'total': 'int',
            'count': 'int',
            'per_page': 'int',
            'current_page': 'int',
            'total_pages': 'int',
            'links': 'PaginationLinks'
        }

        self.attribute_map = {
            'total': 'total',
            'count': 'count',
            'per_page': 'per_page',
            'current_page': 'current_page',
            'total_pages': 'total_pages',
            'links': 'links'
        }

        self._total = total
        self._count = count
        self._per_page = per_page
        self._current_page = current_page
        self._total_pages = total_pages
        self._links = links


    @property
    def total(self):
        """
        Gets the total of this Pagination.


        :return: The total of this Pagination.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this Pagination.


        :param total: The total of this Pagination.
        :type: int
        """

        self._total = total

    @property
    def count(self):
        """
        Gets the count of this Pagination.


        :return: The count of this Pagination.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this Pagination.


        :param count: The count of this Pagination.
        :type: int
        """

        self._count = count

    @property
    def per_page(self):
        """
        Gets the per_page of this Pagination.


        :return: The per_page of this Pagination.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """
        Sets the per_page of this Pagination.


        :param per_page: The per_page of this Pagination.
        :type: int
        """

        self._per_page = per_page

    @property
    def current_page(self):
        """
        Gets the current_page of this Pagination.


        :return: The current_page of this Pagination.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """
        Sets the current_page of this Pagination.


        :param current_page: The current_page of this Pagination.
        :type: int
        """

        self._current_page = current_page

    @property
    def total_pages(self):
        """
        Gets the total_pages of this Pagination.


        :return: The total_pages of this Pagination.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """
        Sets the total_pages of this Pagination.


        :param total_pages: The total_pages of this Pagination.
        :type: int
        """

        self._total_pages = total_pages

    @property
    def links(self):
        """
        Gets the links of this Pagination.


        :return: The links of this Pagination.
        :rtype: PaginationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Pagination.


        :param links: The links of this Pagination.
        :type: PaginationLinks
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
