# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InstanceAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, process_id=None, parent_instance_id=None, init_user_id=None, pin=None, duration=None, status='RUNNING', created_at=None, updated_at=None):
        """
        InstanceAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'process_id': 'str',
            'parent_instance_id': 'str',
            'init_user_id': 'str',
            'pin': 'str',
            'duration': 'int',
            'status': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'process_id': 'process_id',
            'parent_instance_id': 'parent_instance_id',
            'init_user_id': 'init_user_id',
            'pin': 'pin',
            'duration': 'duration',
            'status': 'status',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._name = name
        self._description = description
        self._process_id = process_id
        self._parent_instance_id = parent_instance_id
        self._init_user_id = init_user_id
        self._pin = pin
        self._duration = duration
        self._status = status
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def name(self):
        """
        Gets the name of this InstanceAttributes.


        :return: The name of this InstanceAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InstanceAttributes.


        :param name: The name of this InstanceAttributes.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this InstanceAttributes.


        :return: The description of this InstanceAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InstanceAttributes.


        :param description: The description of this InstanceAttributes.
        :type: str
        """

        self._description = description

    @property
    def process_id(self):
        """
        Gets the process_id of this InstanceAttributes.


        :return: The process_id of this InstanceAttributes.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this InstanceAttributes.


        :param process_id: The process_id of this InstanceAttributes.
        :type: str
        """

        self._process_id = process_id

    @property
    def parent_instance_id(self):
        """
        Gets the parent_instance_id of this InstanceAttributes.


        :return: The parent_instance_id of this InstanceAttributes.
        :rtype: str
        """
        return self._parent_instance_id

    @parent_instance_id.setter
    def parent_instance_id(self, parent_instance_id):
        """
        Sets the parent_instance_id of this InstanceAttributes.


        :param parent_instance_id: The parent_instance_id of this InstanceAttributes.
        :type: str
        """

        self._parent_instance_id = parent_instance_id

    @property
    def init_user_id(self):
        """
        Gets the init_user_id of this InstanceAttributes.


        :return: The init_user_id of this InstanceAttributes.
        :rtype: str
        """
        return self._init_user_id

    @init_user_id.setter
    def init_user_id(self, init_user_id):
        """
        Sets the init_user_id of this InstanceAttributes.


        :param init_user_id: The init_user_id of this InstanceAttributes.
        :type: str
        """

        self._init_user_id = init_user_id

    @property
    def pin(self):
        """
        Gets the pin of this InstanceAttributes.


        :return: The pin of this InstanceAttributes.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """
        Sets the pin of this InstanceAttributes.


        :param pin: The pin of this InstanceAttributes.
        :type: str
        """

        self._pin = pin

    @property
    def duration(self):
        """
        Gets the duration of this InstanceAttributes.


        :return: The duration of this InstanceAttributes.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this InstanceAttributes.


        :param duration: The duration of this InstanceAttributes.
        :type: int
        """

        self._duration = duration

    @property
    def status(self):
        """
        Gets the status of this InstanceAttributes.


        :return: The status of this InstanceAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InstanceAttributes.


        :param status: The status of this InstanceAttributes.
        :type: str
        """
        allowed_values = ["RUNNING", "TODO", "PAUSED", "COMPLETED", "CANCELLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self):
        """
        Gets the created_at of this InstanceAttributes.


        :return: The created_at of this InstanceAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this InstanceAttributes.


        :param created_at: The created_at of this InstanceAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this InstanceAttributes.


        :return: The updated_at of this InstanceAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this InstanceAttributes.


        :param updated_at: The updated_at of this InstanceAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
