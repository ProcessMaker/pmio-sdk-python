# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, username=None, password=None, firstname=None, lastname=None, email=None, expires_at=None, status='ACTIVE', country=None, city=None, location=None, address=None, phone=None, fax=None, cellular=None, zip_code=None, position=None, resume=None, birthday_at=None, bookmark_start_cases=None, time_zone=None, default_lang='en_US', created_at=None, updated_at=None, clients=None):
        """
        UserAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'username': 'str',
            'password': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'email': 'str',
            'expires_at': 'str',
            'status': 'str',
            'country': 'str',
            'city': 'str',
            'location': 'str',
            'address': 'str',
            'phone': 'str',
            'fax': 'str',
            'cellular': 'str',
            'zip_code': 'str',
            'position': 'str',
            'resume': 'str',
            'birthday_at': 'str',
            'bookmark_start_cases': 'str',
            'time_zone': 'str',
            'default_lang': 'str',
            'created_at': 'str',
            'updated_at': 'str',
            'clients': 'list[int]'
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'email': 'email',
            'expires_at': 'expires_at',
            'status': 'status',
            'country': 'country',
            'city': 'city',
            'location': 'location',
            'address': 'address',
            'phone': 'phone',
            'fax': 'fax',
            'cellular': 'cellular',
            'zip_code': 'zip_code',
            'position': 'position',
            'resume': 'resume',
            'birthday_at': 'birthday_at',
            'bookmark_start_cases': 'bookmark_start_cases',
            'time_zone': 'time_zone',
            'default_lang': 'default_lang',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'clients': 'clients'
        }

        self._username = username
        self._password = password
        self._firstname = firstname
        self._lastname = lastname
        self._email = email
        self._expires_at = expires_at
        self._status = status
        self._country = country
        self._city = city
        self._location = location
        self._address = address
        self._phone = phone
        self._fax = fax
        self._cellular = cellular
        self._zip_code = zip_code
        self._position = position
        self._resume = resume
        self._birthday_at = birthday_at
        self._bookmark_start_cases = bookmark_start_cases
        self._time_zone = time_zone
        self._default_lang = default_lang
        self._created_at = created_at
        self._updated_at = updated_at
        self._clients = clients


    @property
    def username(self):
        """
        Gets the username of this UserAttributes.


        :return: The username of this UserAttributes.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserAttributes.


        :param username: The username of this UserAttributes.
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """
        Gets the password of this UserAttributes.


        :return: The password of this UserAttributes.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserAttributes.


        :param password: The password of this UserAttributes.
        :type: str
        """

        self._password = password

    @property
    def firstname(self):
        """
        Gets the firstname of this UserAttributes.


        :return: The firstname of this UserAttributes.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this UserAttributes.


        :param firstname: The firstname of this UserAttributes.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this UserAttributes.


        :return: The lastname of this UserAttributes.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this UserAttributes.


        :param lastname: The lastname of this UserAttributes.
        :type: str
        """

        self._lastname = lastname

    @property
    def email(self):
        """
        Gets the email of this UserAttributes.


        :return: The email of this UserAttributes.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserAttributes.


        :param email: The email of this UserAttributes.
        :type: str
        """

        self._email = email

    @property
    def expires_at(self):
        """
        Gets the expires_at of this UserAttributes.


        :return: The expires_at of this UserAttributes.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this UserAttributes.


        :param expires_at: The expires_at of this UserAttributes.
        :type: str
        """

        self._expires_at = expires_at

    @property
    def status(self):
        """
        Gets the status of this UserAttributes.


        :return: The status of this UserAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UserAttributes.


        :param status: The status of this UserAttributes.
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "VACATION", "CLOSED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def country(self):
        """
        Gets the country of this UserAttributes.


        :return: The country of this UserAttributes.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this UserAttributes.


        :param country: The country of this UserAttributes.
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """
        Gets the city of this UserAttributes.


        :return: The city of this UserAttributes.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this UserAttributes.


        :param city: The city of this UserAttributes.
        :type: str
        """

        self._city = city

    @property
    def location(self):
        """
        Gets the location of this UserAttributes.


        :return: The location of this UserAttributes.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this UserAttributes.


        :param location: The location of this UserAttributes.
        :type: str
        """

        self._location = location

    @property
    def address(self):
        """
        Gets the address of this UserAttributes.


        :return: The address of this UserAttributes.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this UserAttributes.


        :param address: The address of this UserAttributes.
        :type: str
        """

        self._address = address

    @property
    def phone(self):
        """
        Gets the phone of this UserAttributes.


        :return: The phone of this UserAttributes.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this UserAttributes.


        :param phone: The phone of this UserAttributes.
        :type: str
        """

        self._phone = phone

    @property
    def fax(self):
        """
        Gets the fax of this UserAttributes.


        :return: The fax of this UserAttributes.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """
        Sets the fax of this UserAttributes.


        :param fax: The fax of this UserAttributes.
        :type: str
        """

        self._fax = fax

    @property
    def cellular(self):
        """
        Gets the cellular of this UserAttributes.


        :return: The cellular of this UserAttributes.
        :rtype: str
        """
        return self._cellular

    @cellular.setter
    def cellular(self, cellular):
        """
        Sets the cellular of this UserAttributes.


        :param cellular: The cellular of this UserAttributes.
        :type: str
        """

        self._cellular = cellular

    @property
    def zip_code(self):
        """
        Gets the zip_code of this UserAttributes.


        :return: The zip_code of this UserAttributes.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """
        Sets the zip_code of this UserAttributes.


        :param zip_code: The zip_code of this UserAttributes.
        :type: str
        """

        self._zip_code = zip_code

    @property
    def position(self):
        """
        Gets the position of this UserAttributes.


        :return: The position of this UserAttributes.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this UserAttributes.


        :param position: The position of this UserAttributes.
        :type: str
        """

        self._position = position

    @property
    def resume(self):
        """
        Gets the resume of this UserAttributes.


        :return: The resume of this UserAttributes.
        :rtype: str
        """
        return self._resume

    @resume.setter
    def resume(self, resume):
        """
        Sets the resume of this UserAttributes.


        :param resume: The resume of this UserAttributes.
        :type: str
        """

        self._resume = resume

    @property
    def birthday_at(self):
        """
        Gets the birthday_at of this UserAttributes.


        :return: The birthday_at of this UserAttributes.
        :rtype: str
        """
        return self._birthday_at

    @birthday_at.setter
    def birthday_at(self, birthday_at):
        """
        Sets the birthday_at of this UserAttributes.


        :param birthday_at: The birthday_at of this UserAttributes.
        :type: str
        """

        self._birthday_at = birthday_at

    @property
    def bookmark_start_cases(self):
        """
        Gets the bookmark_start_cases of this UserAttributes.


        :return: The bookmark_start_cases of this UserAttributes.
        :rtype: str
        """
        return self._bookmark_start_cases

    @bookmark_start_cases.setter
    def bookmark_start_cases(self, bookmark_start_cases):
        """
        Sets the bookmark_start_cases of this UserAttributes.


        :param bookmark_start_cases: The bookmark_start_cases of this UserAttributes.
        :type: str
        """

        self._bookmark_start_cases = bookmark_start_cases

    @property
    def time_zone(self):
        """
        Gets the time_zone of this UserAttributes.


        :return: The time_zone of this UserAttributes.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this UserAttributes.


        :param time_zone: The time_zone of this UserAttributes.
        :type: str
        """

        self._time_zone = time_zone

    @property
    def default_lang(self):
        """
        Gets the default_lang of this UserAttributes.


        :return: The default_lang of this UserAttributes.
        :rtype: str
        """
        return self._default_lang

    @default_lang.setter
    def default_lang(self, default_lang):
        """
        Sets the default_lang of this UserAttributes.


        :param default_lang: The default_lang of this UserAttributes.
        :type: str
        """

        self._default_lang = default_lang

    @property
    def created_at(self):
        """
        Gets the created_at of this UserAttributes.


        :return: The created_at of this UserAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this UserAttributes.


        :param created_at: The created_at of this UserAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this UserAttributes.


        :return: The updated_at of this UserAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this UserAttributes.


        :param updated_at: The updated_at of this UserAttributes.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def clients(self):
        """
        Gets the clients of this UserAttributes.


        :return: The clients of this UserAttributes.
        :rtype: list[int]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """
        Sets the clients of this UserAttributes.


        :param clients: The clients of this UserAttributes.
        :type: list[int]
        """

        self._clients = clients

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
