# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TaskInstanceAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, task_id=None, instance_id=None, group_id=None, user_id=None, status='INITIAL', priority='3', delegate_date=None, start_date=None, finish_date=None, task_due_date=None, risk_date=None, duration=None, instance_overdue_percentage=None, data=None, content=None, created_at=None, updated_at=None):
        """
        TaskInstanceAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'task_id': 'str',
            'instance_id': 'str',
            'group_id': 'str',
            'user_id': 'str',
            'status': 'str',
            'priority': 'str',
            'delegate_date': 'str',
            'start_date': 'str',
            'finish_date': 'str',
            'task_due_date': 'str',
            'risk_date': 'str',
            'duration': 'int',
            'instance_overdue_percentage': 'float',
            'data': 'str',
            'content': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'task_id': 'task_id',
            'instance_id': 'instance_id',
            'group_id': 'group_id',
            'user_id': 'user_id',
            'status': 'status',
            'priority': 'priority',
            'delegate_date': 'delegate_date',
            'start_date': 'start_date',
            'finish_date': 'finish_date',
            'task_due_date': 'task_due_date',
            'risk_date': 'risk_date',
            'duration': 'duration',
            'instance_overdue_percentage': 'instance_overdue_percentage',
            'data': 'data',
            'content': 'content',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._task_id = task_id
        self._instance_id = instance_id
        self._group_id = group_id
        self._user_id = user_id
        self._status = status
        self._priority = priority
        self._delegate_date = delegate_date
        self._start_date = start_date
        self._finish_date = finish_date
        self._task_due_date = task_due_date
        self._risk_date = risk_date
        self._duration = duration
        self._instance_overdue_percentage = instance_overdue_percentage
        self._data = data
        self._content = content
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def task_id(self):
        """
        Gets the task_id of this TaskInstanceAttributes.


        :return: The task_id of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """
        Sets the task_id of this TaskInstanceAttributes.


        :param task_id: The task_id of this TaskInstanceAttributes.
        :type: str
        """

        self._task_id = task_id

    @property
    def instance_id(self):
        """
        Gets the instance_id of this TaskInstanceAttributes.


        :return: The instance_id of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this TaskInstanceAttributes.


        :param instance_id: The instance_id of this TaskInstanceAttributes.
        :type: str
        """

        self._instance_id = instance_id

    @property
    def group_id(self):
        """
        Gets the group_id of this TaskInstanceAttributes.


        :return: The group_id of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this TaskInstanceAttributes.


        :param group_id: The group_id of this TaskInstanceAttributes.
        :type: str
        """

        self._group_id = group_id

    @property
    def user_id(self):
        """
        Gets the user_id of this TaskInstanceAttributes.


        :return: The user_id of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this TaskInstanceAttributes.


        :param user_id: The user_id of this TaskInstanceAttributes.
        :type: str
        """

        self._user_id = user_id

    @property
    def status(self):
        """
        Gets the status of this TaskInstanceAttributes.


        :return: The status of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TaskInstanceAttributes.


        :param status: The status of this TaskInstanceAttributes.
        :type: str
        """
        allowed_values = ["INITIAL", "DELEGATED", "STARTED", "CANCELLED", "FINISHED", "COMPLETE", "PAUSED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def priority(self):
        """
        Gets the priority of this TaskInstanceAttributes.


        :return: The priority of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this TaskInstanceAttributes.


        :param priority: The priority of this TaskInstanceAttributes.
        :type: str
        """
        allowed_values = ["1", "2", "3", "4", "5"]
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def delegate_date(self):
        """
        Gets the delegate_date of this TaskInstanceAttributes.


        :return: The delegate_date of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._delegate_date

    @delegate_date.setter
    def delegate_date(self, delegate_date):
        """
        Sets the delegate_date of this TaskInstanceAttributes.


        :param delegate_date: The delegate_date of this TaskInstanceAttributes.
        :type: str
        """

        self._delegate_date = delegate_date

    @property
    def start_date(self):
        """
        Gets the start_date of this TaskInstanceAttributes.


        :return: The start_date of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this TaskInstanceAttributes.


        :param start_date: The start_date of this TaskInstanceAttributes.
        :type: str
        """

        self._start_date = start_date

    @property
    def finish_date(self):
        """
        Gets the finish_date of this TaskInstanceAttributes.


        :return: The finish_date of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date):
        """
        Sets the finish_date of this TaskInstanceAttributes.


        :param finish_date: The finish_date of this TaskInstanceAttributes.
        :type: str
        """

        self._finish_date = finish_date

    @property
    def task_due_date(self):
        """
        Gets the task_due_date of this TaskInstanceAttributes.


        :return: The task_due_date of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._task_due_date

    @task_due_date.setter
    def task_due_date(self, task_due_date):
        """
        Sets the task_due_date of this TaskInstanceAttributes.


        :param task_due_date: The task_due_date of this TaskInstanceAttributes.
        :type: str
        """

        self._task_due_date = task_due_date

    @property
    def risk_date(self):
        """
        Gets the risk_date of this TaskInstanceAttributes.


        :return: The risk_date of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._risk_date

    @risk_date.setter
    def risk_date(self, risk_date):
        """
        Sets the risk_date of this TaskInstanceAttributes.


        :param risk_date: The risk_date of this TaskInstanceAttributes.
        :type: str
        """

        self._risk_date = risk_date

    @property
    def duration(self):
        """
        Gets the duration of this TaskInstanceAttributes.


        :return: The duration of this TaskInstanceAttributes.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this TaskInstanceAttributes.


        :param duration: The duration of this TaskInstanceAttributes.
        :type: int
        """

        self._duration = duration

    @property
    def instance_overdue_percentage(self):
        """
        Gets the instance_overdue_percentage of this TaskInstanceAttributes.


        :return: The instance_overdue_percentage of this TaskInstanceAttributes.
        :rtype: float
        """
        return self._instance_overdue_percentage

    @instance_overdue_percentage.setter
    def instance_overdue_percentage(self, instance_overdue_percentage):
        """
        Sets the instance_overdue_percentage of this TaskInstanceAttributes.


        :param instance_overdue_percentage: The instance_overdue_percentage of this TaskInstanceAttributes.
        :type: float
        """

        self._instance_overdue_percentage = instance_overdue_percentage

    @property
    def data(self):
        """
        Gets the data of this TaskInstanceAttributes.


        :return: The data of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this TaskInstanceAttributes.


        :param data: The data of this TaskInstanceAttributes.
        :type: str
        """

        self._data = data

    @property
    def content(self):
        """
        Gets the content of this TaskInstanceAttributes.


        :return: The content of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this TaskInstanceAttributes.


        :param content: The content of this TaskInstanceAttributes.
        :type: str
        """

        self._content = content

    @property
    def created_at(self):
        """
        Gets the created_at of this TaskInstanceAttributes.


        :return: The created_at of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this TaskInstanceAttributes.


        :param created_at: The created_at of this TaskInstanceAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this TaskInstanceAttributes.


        :return: The updated_at of this TaskInstanceAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this TaskInstanceAttributes.


        :param updated_at: The updated_at of this TaskInstanceAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
