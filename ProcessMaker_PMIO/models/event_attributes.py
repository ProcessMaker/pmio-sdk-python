# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EventAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, process_id=None, message_id=None, type=None, definition=None, interrupting=None, condition=None, time=None, duration=None, cycle=None, attached_to_task_id=None, created_at=None, updated_at=None):
        """
        EventAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'process_id': 'str',
            'message_id': 'int',
            'type': 'str',
            'definition': 'str',
            'interrupting': 'bool',
            'condition': 'str',
            'time': 'str',
            'duration': 'str',
            'cycle': 'str',
            'attached_to_task_id': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'process_id': 'process_id',
            'message_id': 'message_id',
            'type': 'type',
            'definition': 'definition',
            'interrupting': 'interrupting',
            'condition': 'condition',
            'time': 'time',
            'duration': 'duration',
            'cycle': 'cycle',
            'attached_to_task_id': 'attached_to_task_id',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._name = name
        self._description = description
        self._process_id = process_id
        self._message_id = message_id
        self._type = type
        self._definition = definition
        self._interrupting = interrupting
        self._condition = condition
        self._time = time
        self._duration = duration
        self._cycle = cycle
        self._attached_to_task_id = attached_to_task_id
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def name(self):
        """
        Gets the name of this EventAttributes.


        :return: The name of this EventAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EventAttributes.


        :param name: The name of this EventAttributes.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this EventAttributes.


        :return: The description of this EventAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EventAttributes.


        :param description: The description of this EventAttributes.
        :type: str
        """

        self._description = description

    @property
    def process_id(self):
        """
        Gets the process_id of this EventAttributes.


        :return: The process_id of this EventAttributes.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this EventAttributes.


        :param process_id: The process_id of this EventAttributes.
        :type: str
        """

        self._process_id = process_id

    @property
    def message_id(self):
        """
        Gets the message_id of this EventAttributes.


        :return: The message_id of this EventAttributes.
        :rtype: int
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this EventAttributes.


        :param message_id: The message_id of this EventAttributes.
        :type: int
        """

        self._message_id = message_id

    @property
    def type(self):
        """
        Gets the type of this EventAttributes.


        :return: The type of this EventAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EventAttributes.


        :param type: The type of this EventAttributes.
        :type: str
        """
        allowed_values = ["START", "END", "INTERMEDIATE_CATCH", "INTERMEDIATE_THROW", "BOUNDARY", "IMPLICIT_THROW"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def definition(self):
        """
        Gets the definition of this EventAttributes.


        :return: The definition of this EventAttributes.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """
        Sets the definition of this EventAttributes.


        :param definition: The definition of this EventAttributes.
        :type: str
        """
        allowed_values = ["NONE", "CANCEL", "COMPENSATION", "ERROR", "ESCALATION", "MESSAGE", "LINK", "SIGNAL", "TERMINATE", "TIMER"]
        if definition not in allowed_values:
            raise ValueError(
                "Invalid value for `definition` ({0}), must be one of {1}"
                .format(definition, allowed_values)
            )

        self._definition = definition

    @property
    def interrupting(self):
        """
        Gets the interrupting of this EventAttributes.


        :return: The interrupting of this EventAttributes.
        :rtype: bool
        """
        return self._interrupting

    @interrupting.setter
    def interrupting(self, interrupting):
        """
        Sets the interrupting of this EventAttributes.


        :param interrupting: The interrupting of this EventAttributes.
        :type: bool
        """

        self._interrupting = interrupting

    @property
    def condition(self):
        """
        Gets the condition of this EventAttributes.


        :return: The condition of this EventAttributes.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """
        Sets the condition of this EventAttributes.


        :param condition: The condition of this EventAttributes.
        :type: str
        """

        self._condition = condition

    @property
    def time(self):
        """
        Gets the time of this EventAttributes.


        :return: The time of this EventAttributes.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this EventAttributes.


        :param time: The time of this EventAttributes.
        :type: str
        """

        self._time = time

    @property
    def duration(self):
        """
        Gets the duration of this EventAttributes.


        :return: The duration of this EventAttributes.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this EventAttributes.


        :param duration: The duration of this EventAttributes.
        :type: str
        """

        self._duration = duration

    @property
    def cycle(self):
        """
        Gets the cycle of this EventAttributes.


        :return: The cycle of this EventAttributes.
        :rtype: str
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """
        Sets the cycle of this EventAttributes.


        :param cycle: The cycle of this EventAttributes.
        :type: str
        """

        self._cycle = cycle

    @property
    def attached_to_task_id(self):
        """
        Gets the attached_to_task_id of this EventAttributes.


        :return: The attached_to_task_id of this EventAttributes.
        :rtype: str
        """
        return self._attached_to_task_id

    @attached_to_task_id.setter
    def attached_to_task_id(self, attached_to_task_id):
        """
        Sets the attached_to_task_id of this EventAttributes.


        :param attached_to_task_id: The attached_to_task_id of this EventAttributes.
        :type: str
        """

        self._attached_to_task_id = attached_to_task_id

    @property
    def created_at(self):
        """
        Gets the created_at of this EventAttributes.


        :return: The created_at of this EventAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this EventAttributes.


        :param created_at: The created_at of this EventAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this EventAttributes.


        :return: The updated_at of this EventAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this EventAttributes.


        :param updated_at: The updated_at of this EventAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
