# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProcessAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, parent_process_id=None, status='ACTIVE', duration_by='WORKING_DAYS', type='NORMAL', assignment=False, design_access='PUBLIC', show_map=True, show_message=True, show_delegate=True, show_dynaform=False, category_id=None, sub_category_id=None, create_user_id=None, debug=False, dynaform_summary_id=None, created_at=None, updated_at=None):
        """
        ProcessAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'parent_process_id': 'str',
            'status': 'str',
            'duration_by': 'str',
            'type': 'str',
            'assignment': 'bool',
            'design_access': 'str',
            'show_map': 'bool',
            'show_message': 'bool',
            'show_delegate': 'bool',
            'show_dynaform': 'bool',
            'category_id': 'str',
            'sub_category_id': 'str',
            'create_user_id': 'str',
            'debug': 'bool',
            'dynaform_summary_id': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'parent_process_id': 'parent_process_id',
            'status': 'status',
            'duration_by': 'duration_by',
            'type': 'type',
            'assignment': 'assignment',
            'design_access': 'design_access',
            'show_map': 'show_map',
            'show_message': 'show_message',
            'show_delegate': 'show_delegate',
            'show_dynaform': 'show_dynaform',
            'category_id': 'category_id',
            'sub_category_id': 'sub_category_id',
            'create_user_id': 'create_user_id',
            'debug': 'debug',
            'dynaform_summary_id': 'dynaform_summary_id',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._name = name
        self._description = description
        self._parent_process_id = parent_process_id
        self._status = status
        self._duration_by = duration_by
        self._type = type
        self._assignment = assignment
        self._design_access = design_access
        self._show_map = show_map
        self._show_message = show_message
        self._show_delegate = show_delegate
        self._show_dynaform = show_dynaform
        self._category_id = category_id
        self._sub_category_id = sub_category_id
        self._create_user_id = create_user_id
        self._debug = debug
        self._dynaform_summary_id = dynaform_summary_id
        self._created_at = created_at
        self._updated_at = updated_at


    @property
    def name(self):
        """
        Gets the name of this ProcessAttributes.


        :return: The name of this ProcessAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProcessAttributes.


        :param name: The name of this ProcessAttributes.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ProcessAttributes.


        :return: The description of this ProcessAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProcessAttributes.


        :param description: The description of this ProcessAttributes.
        :type: str
        """

        self._description = description

    @property
    def parent_process_id(self):
        """
        Gets the parent_process_id of this ProcessAttributes.


        :return: The parent_process_id of this ProcessAttributes.
        :rtype: str
        """
        return self._parent_process_id

    @parent_process_id.setter
    def parent_process_id(self, parent_process_id):
        """
        Sets the parent_process_id of this ProcessAttributes.


        :param parent_process_id: The parent_process_id of this ProcessAttributes.
        :type: str
        """

        self._parent_process_id = parent_process_id

    @property
    def status(self):
        """
        Gets the status of this ProcessAttributes.


        :return: The status of this ProcessAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ProcessAttributes.


        :param status: The status of this ProcessAttributes.
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "DISABLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def duration_by(self):
        """
        Gets the duration_by of this ProcessAttributes.


        :return: The duration_by of this ProcessAttributes.
        :rtype: str
        """
        return self._duration_by

    @duration_by.setter
    def duration_by(self, duration_by):
        """
        Sets the duration_by of this ProcessAttributes.


        :param duration_by: The duration_by of this ProcessAttributes.
        :type: str
        """
        allowed_values = ["WORKING_DAYS", "CALENDAR_DAYS"]
        if duration_by not in allowed_values:
            raise ValueError(
                "Invalid value for `duration_by` ({0}), must be one of {1}"
                .format(duration_by, allowed_values)
            )

        self._duration_by = duration_by

    @property
    def type(self):
        """
        Gets the type of this ProcessAttributes.


        :return: The type of this ProcessAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProcessAttributes.


        :param type: The type of this ProcessAttributes.
        :type: str
        """
        allowed_values = ["NORMAL", "SUB_PROCESS"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def assignment(self):
        """
        Gets the assignment of this ProcessAttributes.


        :return: The assignment of this ProcessAttributes.
        :rtype: bool
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """
        Sets the assignment of this ProcessAttributes.


        :param assignment: The assignment of this ProcessAttributes.
        :type: bool
        """

        self._assignment = assignment

    @property
    def design_access(self):
        """
        Gets the design_access of this ProcessAttributes.


        :return: The design_access of this ProcessAttributes.
        :rtype: str
        """
        return self._design_access

    @design_access.setter
    def design_access(self, design_access):
        """
        Sets the design_access of this ProcessAttributes.


        :param design_access: The design_access of this ProcessAttributes.
        :type: str
        """
        allowed_values = ["PUBLIC", "PRIVATE"]
        if design_access not in allowed_values:
            raise ValueError(
                "Invalid value for `design_access` ({0}), must be one of {1}"
                .format(design_access, allowed_values)
            )

        self._design_access = design_access

    @property
    def show_map(self):
        """
        Gets the show_map of this ProcessAttributes.


        :return: The show_map of this ProcessAttributes.
        :rtype: bool
        """
        return self._show_map

    @show_map.setter
    def show_map(self, show_map):
        """
        Sets the show_map of this ProcessAttributes.


        :param show_map: The show_map of this ProcessAttributes.
        :type: bool
        """

        self._show_map = show_map

    @property
    def show_message(self):
        """
        Gets the show_message of this ProcessAttributes.


        :return: The show_message of this ProcessAttributes.
        :rtype: bool
        """
        return self._show_message

    @show_message.setter
    def show_message(self, show_message):
        """
        Sets the show_message of this ProcessAttributes.


        :param show_message: The show_message of this ProcessAttributes.
        :type: bool
        """

        self._show_message = show_message

    @property
    def show_delegate(self):
        """
        Gets the show_delegate of this ProcessAttributes.


        :return: The show_delegate of this ProcessAttributes.
        :rtype: bool
        """
        return self._show_delegate

    @show_delegate.setter
    def show_delegate(self, show_delegate):
        """
        Sets the show_delegate of this ProcessAttributes.


        :param show_delegate: The show_delegate of this ProcessAttributes.
        :type: bool
        """

        self._show_delegate = show_delegate

    @property
    def show_dynaform(self):
        """
        Gets the show_dynaform of this ProcessAttributes.


        :return: The show_dynaform of this ProcessAttributes.
        :rtype: bool
        """
        return self._show_dynaform

    @show_dynaform.setter
    def show_dynaform(self, show_dynaform):
        """
        Sets the show_dynaform of this ProcessAttributes.


        :param show_dynaform: The show_dynaform of this ProcessAttributes.
        :type: bool
        """

        self._show_dynaform = show_dynaform

    @property
    def category_id(self):
        """
        Gets the category_id of this ProcessAttributes.


        :return: The category_id of this ProcessAttributes.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this ProcessAttributes.


        :param category_id: The category_id of this ProcessAttributes.
        :type: str
        """

        self._category_id = category_id

    @property
    def sub_category_id(self):
        """
        Gets the sub_category_id of this ProcessAttributes.


        :return: The sub_category_id of this ProcessAttributes.
        :rtype: str
        """
        return self._sub_category_id

    @sub_category_id.setter
    def sub_category_id(self, sub_category_id):
        """
        Sets the sub_category_id of this ProcessAttributes.


        :param sub_category_id: The sub_category_id of this ProcessAttributes.
        :type: str
        """

        self._sub_category_id = sub_category_id

    @property
    def create_user_id(self):
        """
        Gets the create_user_id of this ProcessAttributes.


        :return: The create_user_id of this ProcessAttributes.
        :rtype: str
        """
        return self._create_user_id

    @create_user_id.setter
    def create_user_id(self, create_user_id):
        """
        Sets the create_user_id of this ProcessAttributes.


        :param create_user_id: The create_user_id of this ProcessAttributes.
        :type: str
        """

        self._create_user_id = create_user_id

    @property
    def debug(self):
        """
        Gets the debug of this ProcessAttributes.


        :return: The debug of this ProcessAttributes.
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """
        Sets the debug of this ProcessAttributes.


        :param debug: The debug of this ProcessAttributes.
        :type: bool
        """

        self._debug = debug

    @property
    def dynaform_summary_id(self):
        """
        Gets the dynaform_summary_id of this ProcessAttributes.


        :return: The dynaform_summary_id of this ProcessAttributes.
        :rtype: str
        """
        return self._dynaform_summary_id

    @dynaform_summary_id.setter
    def dynaform_summary_id(self, dynaform_summary_id):
        """
        Sets the dynaform_summary_id of this ProcessAttributes.


        :param dynaform_summary_id: The dynaform_summary_id of this ProcessAttributes.
        :type: str
        """

        self._dynaform_summary_id = dynaform_summary_id

    @property
    def created_at(self):
        """
        Gets the created_at of this ProcessAttributes.


        :return: The created_at of this ProcessAttributes.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ProcessAttributes.


        :param created_at: The created_at of this ProcessAttributes.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this ProcessAttributes.


        :return: The updated_at of this ProcessAttributes.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this ProcessAttributes.


        :param updated_at: The updated_at of this ProcessAttributes.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
