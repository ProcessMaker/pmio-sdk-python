# coding: utf-8

"""
    ProcessMaker API

    This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine api that is designed to be used as a microservice to support enterprise cloud applications.  The current Alpha 1.0 version supports most of the descriptive class of the BPMN 2.0 specification.

    OpenAPI spec version: 1.0.0
    Contact: support@processmaker.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProcessmakerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_client(self, user_id, client_create_item, **kwargs):
        """
        
        This method creates a new Oauth client for the user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_client(user_id, client_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of the user related to the Oauth client (required)
        :param ClientCreateItem client_create_item: JSON API with the Oauth Client object to add (required)
        :return: ClientItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_client_with_http_info(user_id, client_create_item, **kwargs)
        else:
            (data) = self.add_client_with_http_info(user_id, client_create_item, **kwargs)
            return data

    def add_client_with_http_info(self, user_id, client_create_item, **kwargs):
        """
        
        This method creates a new Oauth client for the user

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_client_with_http_info(user_id, client_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of the user related to the Oauth client (required)
        :param ClientCreateItem client_create_item: JSON API with the Oauth Client object to add (required)
        :return: ClientItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'client_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `add_client`")
        # verify the required parameter 'client_create_item' is set
        if ('client_create_item' not in params) or (params['client_create_item'] is None):
            raise ValueError("Missing the required parameter `client_create_item` when calling `add_client`")

        resource_path = '/users/{user_id}/clients'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'client_create_item' in params:
            body_params = params['client_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ClientItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_event(self, process_id, event_create_item, **kwargs):
        """
        
        This method creates the new event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_event(process_id, event_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of the process related to the event (required)
        :param EventCreateItem event_create_item: JSON API response with the Event object to add (required)
        :return: EventItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_event_with_http_info(process_id, event_create_item, **kwargs)
        else:
            (data) = self.add_event_with_http_info(process_id, event_create_item, **kwargs)
            return data

    def add_event_with_http_info(self, process_id, event_create_item, **kwargs):
        """
        
        This method creates the new event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_event_with_http_info(process_id, event_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of the process related to the event (required)
        :param EventCreateItem event_create_item: JSON API response with the Event object to add (required)
        :return: EventItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_event`")
        # verify the required parameter 'event_create_item' is set
        if ('event_create_item' not in params) or (params['event_create_item'] is None):
            raise ValueError("Missing the required parameter `event_create_item` when calling `add_event`")

        resource_path = '/processes/{process_id}/events'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_create_item' in params:
            body_params = params['event_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_event_connector(self, process_id, event_id, event_connector_create_item, **kwargs):
        """
        
        This method is intended for creating a new Event connector.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_event_connector(process_id, event_id, event_connector_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Event to fetch (required)
        :param EventConnectorCreateItem event_connector_create_item: JSON API with the EventConnector object to add (required)
        :return: EventConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_event_connector_with_http_info(process_id, event_id, event_connector_create_item, **kwargs)
        else:
            (data) = self.add_event_connector_with_http_info(process_id, event_id, event_connector_create_item, **kwargs)
            return data

    def add_event_connector_with_http_info(self, process_id, event_id, event_connector_create_item, **kwargs):
        """
        
        This method is intended for creating a new Event connector.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_event_connector_with_http_info(process_id, event_id, event_connector_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Event to fetch (required)
        :param EventConnectorCreateItem event_connector_create_item: JSON API with the EventConnector object to add (required)
        :return: EventConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'event_connector_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_event_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_event_connector`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `add_event_connector`")
        # verify the required parameter 'event_connector_create_item' is set
        if ('event_connector_create_item' not in params) or (params['event_connector_create_item'] is None):
            raise ValueError("Missing the required parameter `event_connector_create_item` when calling `add_event_connector`")

        resource_path = '/processes/{process_id}/events/{event_id}/connectors'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_connector_create_item' in params:
            body_params = params['event_connector_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventConnector1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_flow(self, process_id, flow_create_item, **kwargs):
        """
        
        This method creates a new Sequence flow

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_flow(process_id, flow_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of the process related to the flow (required)
        :param FlowCreateItem flow_create_item: JSON API response with the Flow object to add (required)
        :return: FlowItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_flow_with_http_info(process_id, flow_create_item, **kwargs)
        else:
            (data) = self.add_flow_with_http_info(process_id, flow_create_item, **kwargs)
            return data

    def add_flow_with_http_info(self, process_id, flow_create_item, **kwargs):
        """
        
        This method creates a new Sequence flow

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_flow_with_http_info(process_id, flow_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of the process related to the flow (required)
        :param FlowCreateItem flow_create_item: JSON API response with the Flow object to add (required)
        :return: FlowItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'flow_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_flow`")
        # verify the required parameter 'flow_create_item' is set
        if ('flow_create_item' not in params) or (params['flow_create_item'] is None):
            raise ValueError("Missing the required parameter `flow_create_item` when calling `add_flow`")

        resource_path = '/processes/{process_id}/flows'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flow_create_item' in params:
            body_params = params['flow_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_gateway(self, process_id, gateway_create_item, **kwargs):
        """
        
        This method creates a new gateway.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_gateway(process_id, gateway_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of the process related to the gateway (required)
        :param GatewayCreateItem gateway_create_item: JSON API response with the gateway object to add (required)
        :return: GatewayItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_gateway_with_http_info(process_id, gateway_create_item, **kwargs)
        else:
            (data) = self.add_gateway_with_http_info(process_id, gateway_create_item, **kwargs)
            return data

    def add_gateway_with_http_info(self, process_id, gateway_create_item, **kwargs):
        """
        
        This method creates a new gateway.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_gateway_with_http_info(process_id, gateway_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of the process related to the gateway (required)
        :param GatewayCreateItem gateway_create_item: JSON API response with the gateway object to add (required)
        :return: GatewayItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'gateway_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_gateway`")
        # verify the required parameter 'gateway_create_item' is set
        if ('gateway_create_item' not in params) or (params['gateway_create_item'] is None):
            raise ValueError("Missing the required parameter `gateway_create_item` when calling `add_gateway`")

        resource_path = '/processes/{process_id}/gateways'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gateway_create_item' in params:
            body_params = params['gateway_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GatewayItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_group(self, group_create_item, **kwargs):
        """
        
        This method creates a new group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_group(group_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupCreateItem group_create_item: JSON API with the Group object to add (required)
        :return: GroupItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_group_with_http_info(group_create_item, **kwargs)
        else:
            (data) = self.add_group_with_http_info(group_create_item, **kwargs)
            return data

    def add_group_with_http_info(self, group_create_item, **kwargs):
        """
        
        This method creates a new group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_group_with_http_info(group_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GroupCreateItem group_create_item: JSON API with the Group object to add (required)
        :return: GroupItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_create_item' is set
        if ('group_create_item' not in params) or (params['group_create_item'] is None):
            raise ValueError("Missing the required parameter `group_create_item` when calling `add_group`")

        resource_path = '/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_create_item' in params:
            body_params = params['group_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_groups_to_task(self, process_id, task_id, task_add_groups_item, **kwargs):
        """
        
        This method assigns group(s) to the choosen task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_groups_to_task(process_id, task_id, task_add_groups_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: ID of task to be modified (required)
        :param TaskAddGroupsItem task_add_groups_item: JSON API with Groups ID's to add (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_groups_to_task_with_http_info(process_id, task_id, task_add_groups_item, **kwargs)
        else:
            (data) = self.add_groups_to_task_with_http_info(process_id, task_id, task_add_groups_item, **kwargs)
            return data

    def add_groups_to_task_with_http_info(self, process_id, task_id, task_add_groups_item, **kwargs):
        """
        
        This method assigns group(s) to the choosen task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_groups_to_task_with_http_info(process_id, task_id, task_add_groups_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: ID of task to be modified (required)
        :param TaskAddGroupsItem task_add_groups_item: JSON API with Groups ID's to add (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'task_add_groups_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_groups_to_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_groups_to_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `add_groups_to_task`")
        # verify the required parameter 'task_add_groups_item' is set
        if ('task_add_groups_item' not in params) or (params['task_add_groups_item'] is None):
            raise ValueError("Missing the required parameter `task_add_groups_item` when calling `add_groups_to_task`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/groups'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_add_groups_item' in params:
            body_params = params['task_add_groups_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_input_output(self, process_id, task_id, input_output_create_item, **kwargs):
        """
        
        This method creates a new Input/Output object

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_input_output(process_id, task_id, input_output_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to Input/Output object (required)
        :param str task_id: Task instance ID related to Input/Output object (required)
        :param InputOutputCreateItem input_output_create_item: Create and add a new Input/Output object with JSON API (required)
        :return: InputOutputItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_input_output_with_http_info(process_id, task_id, input_output_create_item, **kwargs)
        else:
            (data) = self.add_input_output_with_http_info(process_id, task_id, input_output_create_item, **kwargs)
            return data

    def add_input_output_with_http_info(self, process_id, task_id, input_output_create_item, **kwargs):
        """
        
        This method creates a new Input/Output object

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_input_output_with_http_info(process_id, task_id, input_output_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to Input/Output object (required)
        :param str task_id: Task instance ID related to Input/Output object (required)
        :param InputOutputCreateItem input_output_create_item: Create and add a new Input/Output object with JSON API (required)
        :return: InputOutputItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'input_output_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_input_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_input_output`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `add_input_output`")
        # verify the required parameter 'input_output_create_item' is set
        if ('input_output_create_item' not in params) or (params['input_output_create_item'] is None):
            raise ValueError("Missing the required parameter `input_output_create_item` when calling `add_input_output`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input_output_create_item' in params:
            body_params = params['input_output_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InputOutputItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_instance(self, process_id, instance_create_item, **kwargs):
        """
        
        This method creates a new instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_instance(process_id, instance_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the nstance (required)
        :param InstanceCreateItem instance_create_item: JSON API response with the Instance object to add (required)
        :return: InstanceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_instance_with_http_info(process_id, instance_create_item, **kwargs)
        else:
            (data) = self.add_instance_with_http_info(process_id, instance_create_item, **kwargs)
            return data

    def add_instance_with_http_info(self, process_id, instance_create_item, **kwargs):
        """
        
        This method creates a new instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_instance_with_http_info(process_id, instance_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the nstance (required)
        :param InstanceCreateItem instance_create_item: JSON API response with the Instance object to add (required)
        :return: InstanceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'instance_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_instance`")
        # verify the required parameter 'instance_create_item' is set
        if ('instance_create_item' not in params) or (params['instance_create_item'] is None):
            raise ValueError("Missing the required parameter `instance_create_item` when calling `add_instance`")

        resource_path = '/processes/{process_id}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'instance_create_item' in params:
            body_params = params['instance_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_process(self, process_create_item, **kwargs):
        """
        
        This method creates a new process

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_process(process_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProcessCreateItem process_create_item: JSON API response with the Process object to add (required)
        :return: ProcessItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_process_with_http_info(process_create_item, **kwargs)
        else:
            (data) = self.add_process_with_http_info(process_create_item, **kwargs)
            return data

    def add_process_with_http_info(self, process_create_item, **kwargs):
        """
        
        This method creates a new process

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_process_with_http_info(process_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProcessCreateItem process_create_item: JSON API response with the Process object to add (required)
        :return: ProcessItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_create_item' is set
        if ('process_create_item' not in params) or (params['process_create_item'] is None):
            raise ValueError("Missing the required parameter `process_create_item` when calling `add_process`")

        resource_path = '/processes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'process_create_item' in params:
            body_params = params['process_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProcessItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_task(self, process_id, task_create_item, **kwargs):
        """
        
        This method creates a new task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_task(process_id, task_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the task (required)
        :param TaskCreateItem task_create_item: JSON API with the Task object to add (required)
        :return: TaskItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_task_with_http_info(process_id, task_create_item, **kwargs)
        else:
            (data) = self.add_task_with_http_info(process_id, task_create_item, **kwargs)
            return data

    def add_task_with_http_info(self, process_id, task_create_item, **kwargs):
        """
        
        This method creates a new task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_task_with_http_info(process_id, task_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the task (required)
        :param TaskCreateItem task_create_item: JSON API with the Task object to add (required)
        :return: TaskItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_task`")
        # verify the required parameter 'task_create_item' is set
        if ('task_create_item' not in params) or (params['task_create_item'] is None):
            raise ValueError("Missing the required parameter `task_create_item` when calling `add_task`")

        resource_path = '/processes/{process_id}/tasks'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_create_item' in params:
            body_params = params['task_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_task_connector(self, process_id, task_id, task_connector_create_item, **kwargs):
        """
        
        This method is intended for creating a new task connector.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_task_connector(process_id, task_id, task_connector_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param TaskConnectorCreateItem task_connector_create_item: JSON API with the TaskConnector object to add (required)
        :return: TaskConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_task_connector_with_http_info(process_id, task_id, task_connector_create_item, **kwargs)
        else:
            (data) = self.add_task_connector_with_http_info(process_id, task_id, task_connector_create_item, **kwargs)
            return data

    def add_task_connector_with_http_info(self, process_id, task_id, task_connector_create_item, **kwargs):
        """
        
        This method is intended for creating a new task connector.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_task_connector_with_http_info(process_id, task_id, task_connector_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param TaskConnectorCreateItem task_connector_create_item: JSON API with the TaskConnector object to add (required)
        :return: TaskConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'task_connector_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_task_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `add_task_connector`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `add_task_connector`")
        # verify the required parameter 'task_connector_create_item' is set
        if ('task_connector_create_item' not in params) or (params['task_connector_create_item'] is None):
            raise ValueError("Missing the required parameter `task_connector_create_item` when calling `add_task_connector`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/connectors'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_connector_create_item' in params:
            body_params = params['task_connector_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskConnector1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_user(self, user_create_item, **kwargs):
        """
        
        This method creates a new user in the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_user(user_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserCreateItem user_create_item: JSON API with the User object to add (required)
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_user_with_http_info(user_create_item, **kwargs)
        else:
            (data) = self.add_user_with_http_info(user_create_item, **kwargs)
            return data

    def add_user_with_http_info(self, user_create_item, **kwargs):
        """
        
        This method creates a new user in the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_user_with_http_info(user_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserCreateItem user_create_item: JSON API with the User object to add (required)
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_create_item' is set
        if ('user_create_item' not in params) or (params['user_create_item'] is None):
            raise ValueError("Missing the required parameter `user_create_item` when calling `add_user`")

        resource_path = '/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_create_item' in params:
            body_params = params['user_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def add_users_to_group(self, id, group_add_users_item, **kwargs):
        """
        
        This method adds one or more new users to a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_to_group(id, group_add_users_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to be modified (required)
        :param GroupAddUsersItem group_add_users_item: JSON API response with array of users ID's (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_users_to_group_with_http_info(id, group_add_users_item, **kwargs)
        else:
            (data) = self.add_users_to_group_with_http_info(id, group_add_users_item, **kwargs)
            return data

    def add_users_to_group_with_http_info(self, id, group_add_users_item, **kwargs):
        """
        
        This method adds one or more new users to a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_to_group_with_http_info(id, group_add_users_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to be modified (required)
        :param GroupAddUsersItem group_add_users_item: JSON API response with array of users ID's (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_add_users_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_users_to_group`")
        # verify the required parameter 'group_add_users_item' is set
        if ('group_add_users_item' not in params) or (params['group_add_users_item'] is None):
            raise ValueError("Missing the required parameter `group_add_users_item` when calling `add_users_to_group`")

        resource_path = '/groups/{id}/users'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_add_users_item' in params:
            body_params = params['group_add_users_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_client(self, user_id, client_id, **kwargs):
        """
        
        This method deletes an Oauth client using the client and user IDs.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_client(user_id, client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User ID (required)
        :param str client_id: ID of client to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_client_with_http_info(user_id, client_id, **kwargs)
        else:
            (data) = self.delete_client_with_http_info(user_id, client_id, **kwargs)
            return data

    def delete_client_with_http_info(self, user_id, client_id, **kwargs):
        """
        
        This method deletes an Oauth client using the client and user IDs.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_client_with_http_info(user_id, client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User ID (required)
        :param str client_id: ID of client to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'client_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_client`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `delete_client`")

        resource_path = '/users/{user_id}/clients/{client_id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_event(self, process_id, event_id, **kwargs):
        """
        
        This method deletes an event using the event ID and process ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event(process_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str event_id: ID of event to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_event_with_http_info(process_id, event_id, **kwargs)
        else:
            (data) = self.delete_event_with_http_info(process_id, event_id, **kwargs)
            return data

    def delete_event_with_http_info(self, process_id, event_id, **kwargs):
        """
        
        This method deletes an event using the event ID and process ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event_with_http_info(process_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str event_id: ID of event to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_event`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `delete_event`")

        resource_path = '/processes/{process_id}/events/{event_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_event_connector(self, process_id, event_id, connector_id, **kwargs):
        """
        
        This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event_connector(process_id, event_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of of Process item (required)
        :param str event_id: ID of item to fetch (required)
        :param str connector_id: ID of EventConnector to fetch (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_event_connector_with_http_info(process_id, event_id, connector_id, **kwargs)
        else:
            (data) = self.delete_event_connector_with_http_info(process_id, event_id, connector_id, **kwargs)
            return data

    def delete_event_connector_with_http_info(self, process_id, event_id, connector_id, **kwargs):
        """
        
        This method is intended for deleting a single Event connector based on Event ID, Process ID and Connector ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event_connector_with_http_info(process_id, event_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of of Process item (required)
        :param str event_id: ID of item to fetch (required)
        :param str connector_id: ID of EventConnector to fetch (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'connector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_event_connector`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `delete_event_connector`")
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params) or (params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `delete_event_connector`")

        resource_path = '/processes/{process_id}/events/{event_id}/connectors/{connector_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']
        if 'connector_id' in params:
            path_params['connector_id'] = params['connector_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_flow(self, process_id, flow_id, **kwargs):
        """
        
        This method deletes a sequence flow using the flow ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_flow(process_id, flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str flow_id: ID of flow to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_flow_with_http_info(process_id, flow_id, **kwargs)
        else:
            (data) = self.delete_flow_with_http_info(process_id, flow_id, **kwargs)
            return data

    def delete_flow_with_http_info(self, process_id, flow_id, **kwargs):
        """
        
        This method deletes a sequence flow using the flow ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_flow_with_http_info(process_id, flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str flow_id: ID of flow to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'flow_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_flow`")
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `delete_flow`")

        resource_path = '/processes/{process_id}/flows/{flow_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'flow_id' in params:
            path_params['flow_id'] = params['flow_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_gateway(self, process_id, gateway_id, **kwargs):
        """
        
        This method is deletes a single item using the gateway ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_gateway(process_id, gateway_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str gateway_id: ID of Process to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_gateway_with_http_info(process_id, gateway_id, **kwargs)
        else:
            (data) = self.delete_gateway_with_http_info(process_id, gateway_id, **kwargs)
            return data

    def delete_gateway_with_http_info(self, process_id, gateway_id, **kwargs):
        """
        
        This method is deletes a single item using the gateway ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_gateway_with_http_info(process_id, gateway_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str gateway_id: ID of Process to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'gateway_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_gateway`")
        # verify the required parameter 'gateway_id' is set
        if ('gateway_id' not in params) or (params['gateway_id'] is None):
            raise ValueError("Missing the required parameter `gateway_id` when calling `delete_gateway`")

        resource_path = '/processes/{process_id}/gateways/{gateway_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'gateway_id' in params:
            path_params['gateway_id'] = params['gateway_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_group(self, id, **kwargs):
        """
        
        This method deletes a group using the group ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_group(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_group_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_group_with_http_info(id, **kwargs)
            return data

    def delete_group_with_http_info(self, id, **kwargs):
        """
        
        This method deletes a group using the group ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_group_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_group`")

        resource_path = '/groups/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_input_output(self, process_id, task_id, inputoutput_uid, **kwargs):
        """
        
        This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_input_output(process_id, task_id, inputoutput_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the Input/Output object (required)
        :param str task_id: Task instance ID related to Input/Output object (required)
        :param str inputoutput_uid: Input/Output ID to fetch (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_input_output_with_http_info(process_id, task_id, inputoutput_uid, **kwargs)
        else:
            (data) = self.delete_input_output_with_http_info(process_id, task_id, inputoutput_uid, **kwargs)
            return data

    def delete_input_output_with_http_info(self, process_id, task_id, inputoutput_uid, **kwargs):
        """
        
        This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_input_output_with_http_info(process_id, task_id, inputoutput_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the Input/Output object (required)
        :param str task_id: Task instance ID related to Input/Output object (required)
        :param str inputoutput_uid: Input/Output ID to fetch (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'inputoutput_uid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_input_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_input_output`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `delete_input_output`")
        # verify the required parameter 'inputoutput_uid' is set
        if ('inputoutput_uid' not in params) or (params['inputoutput_uid'] is None):
            raise ValueError("Missing the required parameter `inputoutput_uid` when calling `delete_input_output`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']
        if 'inputoutput_uid' in params:
            path_params['inputoutput_uid'] = params['inputoutput_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_instance(self, process_id, instance_id, **kwargs):
        """
        
        This method deletes an instance using the instance ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_instance(process_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str instance_id: ID of instance to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_instance_with_http_info(process_id, instance_id, **kwargs)
        else:
            (data) = self.delete_instance_with_http_info(process_id, instance_id, **kwargs)
            return data

    def delete_instance_with_http_info(self, process_id, instance_id, **kwargs):
        """
        
        This method deletes an instance using the instance ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_instance_with_http_info(process_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str instance_id: ID of instance to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'instance_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_instance`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `delete_instance`")

        resource_path = '/processes/{process_id}/instances/{instance_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_process(self, id, **kwargs):
        """
        
        This method deletes a process using the process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_process(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Process ID to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_process_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_process_with_http_info(id, **kwargs)
            return data

    def delete_process_with_http_info(self, id, **kwargs):
        """
        
        This method deletes a process using the process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_process_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Process ID to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_process`")

        resource_path = '/processes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_task(self, process_id, task_id, **kwargs):
        """
        
        This method deletes a task using the task ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_task(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: ID of task to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_task_with_http_info(process_id, task_id, **kwargs)
        else:
            (data) = self.delete_task_with_http_info(process_id, task_id, **kwargs)
            return data

    def delete_task_with_http_info(self, process_id, task_id, **kwargs):
        """
        
        This method deletes a task using the task ID and process ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_task_with_http_info(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: ID of task to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `delete_task`")

        resource_path = '/processes/{process_id}/tasks/{task_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_task_connector(self, process_id, task_id, connector_id, **kwargs):
        """
        
        This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_task_connector(process_id, task_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process item to fetch (required)
        :param str task_id: ID of Task item to fetch (required)
        :param str connector_id: ID of TaskConnector to fetch (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_task_connector_with_http_info(process_id, task_id, connector_id, **kwargs)
        else:
            (data) = self.delete_task_connector_with_http_info(process_id, task_id, connector_id, **kwargs)
            return data

    def delete_task_connector_with_http_info(self, process_id, task_id, connector_id, **kwargs):
        """
        
        This method is intended for deleting a single Task connector based on Task ID, Process ID and Connector ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_task_connector_with_http_info(process_id, task_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process item to fetch (required)
        :param str task_id: ID of Task item to fetch (required)
        :param str connector_id: ID of TaskConnector to fetch (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'connector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_task_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `delete_task_connector`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `delete_task_connector`")
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params) or (params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `delete_task_connector`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']
        if 'connector_id' in params:
            path_params['connector_id'] = params['connector_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_user(self, id, **kwargs):
        """
        
        This method deletes a user from the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_user(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of user to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_user_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_user_with_http_info(id, **kwargs)
            return data

    def delete_user_with_http_info(self, id, **kwargs):
        """
        
        This method deletes a user from the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_user_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of user to delete (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_user`")

        resource_path = '/users/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def event_trigger(self, process_id, event_id, trigger_event_create_item, **kwargs):
        """
        
        This method starts/triggers an event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_trigger(process_id, event_id, trigger_event_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the event (required)
        :param str event_id: ID of event to trigger (required)
        :param TriggerEventCreateItem trigger_event_create_item: Json with some parameters (required)
        :return: DataModelItem1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.event_trigger_with_http_info(process_id, event_id, trigger_event_create_item, **kwargs)
        else:
            (data) = self.event_trigger_with_http_info(process_id, event_id, trigger_event_create_item, **kwargs)
            return data

    def event_trigger_with_http_info(self, process_id, event_id, trigger_event_create_item, **kwargs):
        """
        
        This method starts/triggers an event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_trigger_with_http_info(process_id, event_id, trigger_event_create_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the event (required)
        :param str event_id: ID of event to trigger (required)
        :param TriggerEventCreateItem trigger_event_create_item: Json with some parameters (required)
        :return: DataModelItem1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'trigger_event_create_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `event_trigger`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `event_trigger`")
        # verify the required parameter 'trigger_event_create_item' is set
        if ('trigger_event_create_item' not in params) or (params['trigger_event_create_item'] is None):
            raise ValueError("Missing the required parameter `trigger_event_create_item` when calling `event_trigger`")

        resource_path = '/processes/{process_id}/events/{event_id}/trigger'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trigger_event_create_item' in params:
            body_params = params['trigger_event_create_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataModelItem1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_client_by_id(self, user_id, client_id, **kwargs):
        """
        
        This method is retrieves an Oauth client based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_client_by_id(user_id, client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of user to retrieve (required)
        :param str client_id: ID of client to retrieve (required)
        :return: ClientItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_client_by_id_with_http_info(user_id, client_id, **kwargs)
        else:
            (data) = self.find_client_by_id_with_http_info(user_id, client_id, **kwargs)
            return data

    def find_client_by_id_with_http_info(self, user_id, client_id, **kwargs):
        """
        
        This method is retrieves an Oauth client based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_client_by_id_with_http_info(user_id, client_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of user to retrieve (required)
        :param str client_id: ID of client to retrieve (required)
        :return: ClientItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'client_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_client_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `find_client_by_id`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `find_client_by_id`")

        resource_path = '/users/{user_id}/clients/{client_id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ClientItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_clients(self, user_id, **kwargs):
        """
        
        This method retrieves all existing clients belonging to an user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_clients(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User ID related to the clients (required)
        :param int pagefind_process_by_id: Page numbers to fetch
        :param int per_page: Amount of items per page
        :return: ClientCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_clients_with_http_info(user_id, **kwargs)
        else:
            (data) = self.find_clients_with_http_info(user_id, **kwargs)
            return data

    def find_clients_with_http_info(self, user_id, **kwargs):
        """
        
        This method retrieves all existing clients belonging to an user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_clients_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: User ID related to the clients (required)
        :param int pagefind_process_by_id: Page numbers to fetch
        :param int per_page: Amount of items per page
        :return: ClientCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'pagefind_process_by_id', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_clients" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `find_clients`")

        resource_path = '/users/{user_id}/clients'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']

        query_params = {}
        if 'pagefind_process_by_id' in params:
            query_params['pagefindProcessById'] = params['pagefind_process_by_id']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ClientCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_data_model(self, process_id, instance_id, **kwargs):
        """
        
        This method returns the instance DataModel and lets the user work with it directly

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_data_model(process_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str instance_id: ID of instance to return (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: DataModelItem1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_data_model_with_http_info(process_id, instance_id, **kwargs)
        else:
            (data) = self.find_data_model_with_http_info(process_id, instance_id, **kwargs)
            return data

    def find_data_model_with_http_info(self, process_id, instance_id, **kwargs):
        """
        
        This method returns the instance DataModel and lets the user work with it directly

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_data_model_with_http_info(process_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str instance_id: ID of instance to return (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: DataModelItem1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'instance_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_data_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_data_model`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `find_data_model`")

        resource_path = '/processes/{process_id}/instances/{instance_id}/datamodel'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataModelItem1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_event_by_id(self, process_id, event_id, **kwargs):
        """
        
        This method retrieves an event using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_event_by_id(process_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str event_id: ID of event to return (required)
        :return: EventItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_event_by_id_with_http_info(process_id, event_id, **kwargs)
        else:
            (data) = self.find_event_by_id_with_http_info(process_id, event_id, **kwargs)
            return data

    def find_event_by_id_with_http_info(self, process_id, event_id, **kwargs):
        """
        
        This method retrieves an event using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_event_by_id_with_http_info(process_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str event_id: ID of event to return (required)
        :return: EventItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_event_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_event_by_id`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `find_event_by_id`")

        resource_path = '/processes/{process_id}/events/{event_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_event_connector_by_id(self, process_id, event_id, connector_id, **kwargs):
        """
        
        This method returns all Event connectors related to the run Process and Event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_event_connector_by_id(process_id, event_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Event to fetch (required)
        :param str connector_id: ID of EventConnector to fetch (required)
        :return: EventConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_event_connector_by_id_with_http_info(process_id, event_id, connector_id, **kwargs)
        else:
            (data) = self.find_event_connector_by_id_with_http_info(process_id, event_id, connector_id, **kwargs)
            return data

    def find_event_connector_by_id_with_http_info(self, process_id, event_id, connector_id, **kwargs):
        """
        
        This method returns all Event connectors related to the run Process and Event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_event_connector_by_id_with_http_info(process_id, event_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Event to fetch (required)
        :param str connector_id: ID of EventConnector to fetch (required)
        :return: EventConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'connector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_event_connector_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_event_connector_by_id`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `find_event_connector_by_id`")
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params) or (params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `find_event_connector_by_id`")

        resource_path = '/processes/{process_id}/events/{event_id}/connectors/{connector_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']
        if 'connector_id' in params:
            path_params['connector_id'] = params['connector_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventConnector1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_event_connectors(self, process_id, event_id, **kwargs):
        """
        
        This method returns all Event connectors related to the run Process and Event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_event_connectors(process_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Task to fetch (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: EventConnectorsCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_event_connectors_with_http_info(process_id, event_id, **kwargs)
        else:
            (data) = self.find_event_connectors_with_http_info(process_id, event_id, **kwargs)
            return data

    def find_event_connectors_with_http_info(self, process_id, event_id, **kwargs):
        """
        
        This method returns all Event connectors related to the run Process and Event.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_event_connectors_with_http_info(process_id, event_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Task to fetch (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: EventConnectorsCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_event_connectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_event_connectors`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `find_event_connectors`")

        resource_path = '/processes/{process_id}/events/{event_id}/connectors'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventConnectorsCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_events(self, process_id, **kwargs):
        """
        
        This method returns all events related to the runned process

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_events(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process related to the event (required)
        :param int page: Page numbers to fetch
        :param int per_page: Amount of items per Page
        :return: EventCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_events_with_http_info(process_id, **kwargs)
        else:
            (data) = self.find_events_with_http_info(process_id, **kwargs)
            return data

    def find_events_with_http_info(self, process_id, **kwargs):
        """
        
        This method returns all events related to the runned process

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_events_with_http_info(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process related to the event (required)
        :param int page: Page numbers to fetch
        :param int per_page: Amount of items per Page
        :return: EventCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_events`")

        resource_path = '/processes/{process_id}/events'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_flow_by_id(self, process_id, flow_id, **kwargs):
        """
        
        This method retrieves a flow based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_flow_by_id(process_id, flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str flow_id: ID of flow to return (required)
        :return: FlowItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_flow_by_id_with_http_info(process_id, flow_id, **kwargs)
        else:
            (data) = self.find_flow_by_id_with_http_info(process_id, flow_id, **kwargs)
            return data

    def find_flow_by_id_with_http_info(self, process_id, flow_id, **kwargs):
        """
        
        This method retrieves a flow based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_flow_by_id_with_http_info(process_id, flow_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str flow_id: ID of flow to return (required)
        :return: FlowItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'flow_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_flow_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_flow_by_id`")
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `find_flow_by_id`")

        resource_path = '/processes/{process_id}/flows/{flow_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'flow_id' in params:
            path_params['flow_id'] = params['flow_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_flows(self, process_id, **kwargs):
        """
        
        This method retrieves all existing flows.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_flows(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process related to the flow (required)
        :param int page: Page numbers to fetch
        :param int per_page: Amount of items per Page
        :return: FlowCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_flows_with_http_info(process_id, **kwargs)
        else:
            (data) = self.find_flows_with_http_info(process_id, **kwargs)
            return data

    def find_flows_with_http_info(self, process_id, **kwargs):
        """
        
        This method retrieves all existing flows.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_flows_with_http_info(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process related to the flow (required)
        :param int page: Page numbers to fetch
        :param int per_page: Amount of items per Page
        :return: FlowCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_flows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_flows`")

        resource_path = '/processes/{process_id}/flows'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_gateway_by_id(self, process_id, gateway_id, **kwargs):
        """
        
        This method retrieves a gateway based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_gateway_by_id(process_id, gateway_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str gateway_id: ID of gateway to return (required)
        :return: GatewayItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_gateway_by_id_with_http_info(process_id, gateway_id, **kwargs)
        else:
            (data) = self.find_gateway_by_id_with_http_info(process_id, gateway_id, **kwargs)
            return data

    def find_gateway_by_id_with_http_info(self, process_id, gateway_id, **kwargs):
        """
        
        This method retrieves a gateway based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_gateway_by_id_with_http_info(process_id, gateway_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str gateway_id: ID of gateway to return (required)
        :return: GatewayItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'gateway_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_gateway_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_gateway_by_id`")
        # verify the required parameter 'gateway_id' is set
        if ('gateway_id' not in params) or (params['gateway_id'] is None):
            raise ValueError("Missing the required parameter `gateway_id` when calling `find_gateway_by_id`")

        resource_path = '/processes/{process_id}/gateways/{gateway_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'gateway_id' in params:
            path_params['gateway_id'] = params['gateway_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GatewayItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_gateways(self, process_id, **kwargs):
        """
        
        This method retrieves all existing gateways.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_gateways(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process related to the gateway (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: GatewayCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_gateways_with_http_info(process_id, **kwargs)
        else:
            (data) = self.find_gateways_with_http_info(process_id, **kwargs)
            return data

    def find_gateways_with_http_info(self, process_id, **kwargs):
        """
        
        This method retrieves all existing gateways.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_gateways_with_http_info(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process related to the gateway (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: GatewayCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_gateways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_gateways`")

        resource_path = '/processes/{process_id}/gateways'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GatewayCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_group_by_id(self, id, **kwargs):
        """
        
        This method retrieves a group using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_group_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to return (required)
        :return: GroupItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_group_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.find_group_by_id_with_http_info(id, **kwargs)
            return data

    def find_group_by_id_with_http_info(self, id, **kwargs):
        """
        
        This method retrieves a group using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_group_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to return (required)
        :return: GroupItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `find_group_by_id`")

        resource_path = '/groups/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_groups(self, **kwargs):
        """
        
        This method retrieves all existing groups.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_groups(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: GroupCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_groups_with_http_info(**kwargs)
        else:
            (data) = self.find_groups_with_http_info(**kwargs)
            return data

    def find_groups_with_http_info(self, **kwargs):
        """
        
        This method retrieves all existing groups.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_groups_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: GroupCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_groups" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/groups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_input_output_by_id(self, process_id, task_id, inputoutput_uid, **kwargs):
        """
        
        This method retrieves an Input/Output object using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_input_output_by_id(process_id, task_id, inputoutput_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the Input/Output object (required)
        :param str task_id: Task instance ID related to the Input/Output object (required)
        :param str inputoutput_uid: ID of Input/Output to return (required)
        :return: InputOutputItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_input_output_by_id_with_http_info(process_id, task_id, inputoutput_uid, **kwargs)
        else:
            (data) = self.find_input_output_by_id_with_http_info(process_id, task_id, inputoutput_uid, **kwargs)
            return data

    def find_input_output_by_id_with_http_info(self, process_id, task_id, inputoutput_uid, **kwargs):
        """
        
        This method retrieves an Input/Output object using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_input_output_by_id_with_http_info(process_id, task_id, inputoutput_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the Input/Output object (required)
        :param str task_id: Task instance ID related to the Input/Output object (required)
        :param str inputoutput_uid: ID of Input/Output to return (required)
        :return: InputOutputItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'inputoutput_uid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_input_output_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_input_output_by_id`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `find_input_output_by_id`")
        # verify the required parameter 'inputoutput_uid' is set
        if ('inputoutput_uid' not in params) or (params['inputoutput_uid'] is None):
            raise ValueError("Missing the required parameter `inputoutput_uid` when calling `find_input_output_by_id`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']
        if 'inputoutput_uid' in params:
            path_params['inputoutput_uid'] = params['inputoutput_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InputOutputItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_input_outputs(self, process_id, task_id, **kwargs):
        """
        
        This method retrieves all existing Input/Output objects in the related task instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_input_outputs(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to Input/Output object (required)
        :param str task_id: Task instance ID related to Input/Output object (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: InputOutputCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_input_outputs_with_http_info(process_id, task_id, **kwargs)
        else:
            (data) = self.find_input_outputs_with_http_info(process_id, task_id, **kwargs)
            return data

    def find_input_outputs_with_http_info(self, process_id, task_id, **kwargs):
        """
        
        This method retrieves all existing Input/Output objects in the related task instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_input_outputs_with_http_info(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to Input/Output object (required)
        :param str task_id: Task instance ID related to Input/Output object (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: InputOutputCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_input_outputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_input_outputs`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `find_input_outputs`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InputOutputCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_instance_by_id(self, process_id, instance_id, **kwargs):
        """
        
        This method retrieves an instance using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_instance_by_id(process_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str instance_id: ID of instance to return (required)
        :return: InstanceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_instance_by_id_with_http_info(process_id, instance_id, **kwargs)
        else:
            (data) = self.find_instance_by_id_with_http_info(process_id, instance_id, **kwargs)
            return data

    def find_instance_by_id_with_http_info(self, process_id, instance_id, **kwargs):
        """
        
        This method retrieves an instance using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_instance_by_id_with_http_info(process_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str instance_id: ID of instance to return (required)
        :return: InstanceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'instance_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_instance_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_instance_by_id`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `find_instance_by_id`")

        resource_path = '/processes/{process_id}/instances/{instance_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_instances(self, process_id, **kwargs):
        """
        
        This method retrieves related to the process using  the Process ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_instances(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the instances (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: InstanceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_instances_with_http_info(process_id, **kwargs)
        else:
            (data) = self.find_instances_with_http_info(process_id, **kwargs)
            return data

    def find_instances_with_http_info(self, process_id, **kwargs):
        """
        
        This method retrieves related to the process using  the Process ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_instances_with_http_info(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the instances (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: InstanceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_instances`")

        resource_path = '/processes/{process_id}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_process_by_id(self, id, **kwargs):
        """
        
        This method retrieves a process using its ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_process_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of process to return (required)
        :return: ProcessItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_process_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.find_process_by_id_with_http_info(id, **kwargs)
            return data

    def find_process_by_id_with_http_info(self, id, **kwargs):
        """
        
        This method retrieves a process using its ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_process_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of process to return (required)
        :return: ProcessItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_process_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `find_process_by_id`")

        resource_path = '/processes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProcessItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_processes(self, **kwargs):
        """
        
        This method retrieves all existing processes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_processes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: ProcessCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_processes_with_http_info(**kwargs)
        else:
            (data) = self.find_processes_with_http_info(**kwargs)
            return data

    def find_processes_with_http_info(self, **kwargs):
        """
        
        This method retrieves all existing processes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_processes_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: ProcessCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_processes" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/processes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProcessCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_task_by_id(self, process_id, task_id, **kwargs):
        """
        
        This method is retrieves a task using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_by_id(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str task_id: ID of task to return (required)
        :return: TaskItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_task_by_id_with_http_info(process_id, task_id, **kwargs)
        else:
            (data) = self.find_task_by_id_with_http_info(process_id, task_id, **kwargs)
            return data

    def find_task_by_id_with_http_info(self, process_id, task_id, **kwargs):
        """
        
        This method is retrieves a task using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_by_id_with_http_info(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to return (required)
        :param str task_id: ID of task to return (required)
        :return: TaskItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_task_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_task_by_id`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `find_task_by_id`")

        resource_path = '/processes/{process_id}/tasks/{task_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_task_connector_by_id(self, process_id, task_id, connector_id, **kwargs):
        """
        
        This method is intended for retrieving an Task connector based on it's ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_connector_by_id(process_id, task_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param str connector_id: ID of TaskConnector to fetch (required)
        :return: TaskConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_task_connector_by_id_with_http_info(process_id, task_id, connector_id, **kwargs)
        else:
            (data) = self.find_task_connector_by_id_with_http_info(process_id, task_id, connector_id, **kwargs)
            return data

    def find_task_connector_by_id_with_http_info(self, process_id, task_id, connector_id, **kwargs):
        """
        
        This method is intended for retrieving an Task connector based on it's ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_connector_by_id_with_http_info(process_id, task_id, connector_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param str connector_id: ID of TaskConnector to fetch (required)
        :return: TaskConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'connector_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_task_connector_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_task_connector_by_id`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `find_task_connector_by_id`")
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params) or (params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `find_task_connector_by_id`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']
        if 'connector_id' in params:
            path_params['connector_id'] = params['connector_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskConnector1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_task_connectors(self, process_id, task_id, **kwargs):
        """
        
        This method returns all Task connectors related to the run Process and Task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_connectors(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: TaskConnectorsCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_task_connectors_with_http_info(process_id, task_id, **kwargs)
        else:
            (data) = self.find_task_connectors_with_http_info(process_id, task_id, **kwargs)
            return data

    def find_task_connectors_with_http_info(self, process_id, task_id, **kwargs):
        """
        
        This method returns all Task connectors related to the run Process and Task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_connectors_with_http_info(process_id, task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: TaskConnectorsCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_task_connectors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_task_connectors`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `find_task_connectors`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/connectors'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskConnectorsCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_task_instance_by_id(self, task_instance_id, **kwargs):
        """
        
        This method retrieves a task instance based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_instance_by_id(task_instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str task_instance_id: ID of task instance to return (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_task_instance_by_id_with_http_info(task_instance_id, **kwargs)
        else:
            (data) = self.find_task_instance_by_id_with_http_info(task_instance_id, **kwargs)
            return data

    def find_task_instance_by_id_with_http_info(self, task_instance_id, **kwargs):
        """
        
        This method retrieves a task instance based on its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_instance_by_id_with_http_info(task_instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str task_instance_id: ID of task instance to return (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_instance_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_task_instance_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_instance_id' is set
        if ('task_instance_id' not in params) or (params['task_instance_id'] is None):
            raise ValueError("Missing the required parameter `task_instance_id` when calling `find_task_instance_by_id`")

        resource_path = '/task_instances/{task_instance_id}'.replace('{format}', 'json')
        path_params = {}
        if 'task_instance_id' in params:
            path_params['task_instance_id'] = params['task_instance_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_task_instances(self, **kwargs):
        """
        
        This method retrieves all existing task instances

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_instances(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: TaskInstanceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_task_instances_with_http_info(**kwargs)
        else:
            (data) = self.find_task_instances_with_http_info(**kwargs)
            return data

    def find_task_instances_with_http_info(self, **kwargs):
        """
        
        This method retrieves all existing task instances

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_task_instances_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: TaskInstanceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_task_instances" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/task_instances'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskInstanceCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_tasks(self, process_id, **kwargs):
        """
        
        This method is intended for returning a list of all Tasks related to the process

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_tasks(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process relative to task (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: TaskCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_tasks_with_http_info(process_id, **kwargs)
        else:
            (data) = self.find_tasks_with_http_info(process_id, **kwargs)
            return data

    def find_tasks_with_http_info(self, process_id, **kwargs):
        """
        
        This method is intended for returning a list of all Tasks related to the process

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_tasks_with_http_info(process_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process relative to task (required)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per Page
        :return: TaskCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `find_tasks`")

        resource_path = '/processes/{process_id}/tasks'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_user_by_id(self, id, **kwargs):
        """
        
        This method returns a user using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_user_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of the user to return (required)
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_user_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.find_user_by_id_with_http_info(id, **kwargs)
            return data

    def find_user_by_id_with_http_info(self, id, **kwargs):
        """
        
        This method returns a user using its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_user_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of the user to return (required)
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_user_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `find_user_by_id`")

        resource_path = '/users/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def find_users(self, **kwargs):
        """
        
        This method returs all existing users in the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: UserCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.find_users_with_http_info(**kwargs)
        else:
            (data) = self.find_users_with_http_info(**kwargs)
            return data

    def find_users_with_http_info(self, **kwargs):
        """
        
        This method returs all existing users in the system.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.find_users_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: UserCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_users" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def import_bpmn_file(self, bpmn_import_item, **kwargs):
        """
        
        This method imports BPMN files. A new process is created when import is successful.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_bpmn_file(bpmn_import_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BpmnImportItem bpmn_import_item: JSON API with the BPMN file to import (required)
        :return: ProcessCollection1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.import_bpmn_file_with_http_info(bpmn_import_item, **kwargs)
        else:
            (data) = self.import_bpmn_file_with_http_info(bpmn_import_item, **kwargs)
            return data

    def import_bpmn_file_with_http_info(self, bpmn_import_item, **kwargs):
        """
        
        This method imports BPMN files. A new process is created when import is successful.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_bpmn_file_with_http_info(bpmn_import_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BpmnImportItem bpmn_import_item: JSON API with the BPMN file to import (required)
        :return: ProcessCollection1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bpmn_import_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_bpmn_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bpmn_import_item' is set
        if ('bpmn_import_item' not in params) or (params['bpmn_import_item'] is None):
            raise ValueError("Missing the required parameter `bpmn_import_item` when calling `import_bpmn_file`")

        resource_path = '/processes/import'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bpmn_import_item' in params:
            body_params = params['bpmn_import_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProcessCollection1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def myself_user(self, **kwargs):
        """
        
        This method returns user information using a token

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.myself_user(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.myself_user_with_http_info(**kwargs)
        else:
            (data) = self.myself_user_with_http_info(**kwargs)
            return data

    def myself_user_with_http_info(self, **kwargs):
        """
        
        This method returns user information using a token

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.myself_user_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number to fetch
        :param int per_page: Amount of items per page
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method myself_user" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/users/myself'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_groups_from_task(self, process_id, task_id, task_remove_groups_item, **kwargs):
        """
        
        This method removes groups from a task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_groups_from_task(process_id, task_id, task_remove_groups_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: Task ID (required)
        :param TaskRemoveGroupsItem task_remove_groups_item: JSON API response with Groups IDs to remove (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_groups_from_task_with_http_info(process_id, task_id, task_remove_groups_item, **kwargs)
        else:
            (data) = self.remove_groups_from_task_with_http_info(process_id, task_id, task_remove_groups_item, **kwargs)
            return data

    def remove_groups_from_task_with_http_info(self, process_id, task_id, task_remove_groups_item, **kwargs):
        """
        
        This method removes groups from a task

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_groups_from_task_with_http_info(process_id, task_id, task_remove_groups_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: Task ID (required)
        :param TaskRemoveGroupsItem task_remove_groups_item: JSON API response with Groups IDs to remove (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'task_remove_groups_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_groups_from_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `remove_groups_from_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `remove_groups_from_task`")
        # verify the required parameter 'task_remove_groups_item' is set
        if ('task_remove_groups_item' not in params) or (params['task_remove_groups_item'] is None):
            raise ValueError("Missing the required parameter `task_remove_groups_item` when calling `remove_groups_from_task`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/groups'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_remove_groups_item' in params:
            body_params = params['task_remove_groups_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_users_from_group(self, id, group_remove_users_item, **kwargs):
        """
        
        This method removes one or more users from a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_users_from_group(id, group_remove_users_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to be modified (required)
        :param GroupRemoveUsersItem group_remove_users_item: JSON API response with Users IDs to remove (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_users_from_group_with_http_info(id, group_remove_users_item, **kwargs)
        else:
            (data) = self.remove_users_from_group_with_http_info(id, group_remove_users_item, **kwargs)
            return data

    def remove_users_from_group_with_http_info(self, id, group_remove_users_item, **kwargs):
        """
        
        This method removes one or more users from a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_users_from_group_with_http_info(id, group_remove_users_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to be modified (required)
        :param GroupRemoveUsersItem group_remove_users_item: JSON API response with Users IDs to remove (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_remove_users_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_users_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_users_from_group`")
        # verify the required parameter 'group_remove_users_item' is set
        if ('group_remove_users_item' not in params) or (params['group_remove_users_item'] is None):
            raise ValueError("Missing the required parameter `group_remove_users_item` when calling `remove_users_from_group`")

        resource_path = '/groups/{id}/users'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_remove_users_item' in params:
            body_params = params['group_remove_users_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def sync_groups_to_task(self, process_id, task_id, task_sync_groups_item, **kwargs):
        """
        
        This method synchronizes a one or more groups with a task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_groups_to_task(process_id, task_id, task_sync_groups_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: ID of task to modify (required)
        :param TaskSyncGroupsItem task_sync_groups_item: JSON API response with groups IDs to sync (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sync_groups_to_task_with_http_info(process_id, task_id, task_sync_groups_item, **kwargs)
        else:
            (data) = self.sync_groups_to_task_with_http_info(process_id, task_id, task_sync_groups_item, **kwargs)
            return data

    def sync_groups_to_task_with_http_info(self, process_id, task_id, task_sync_groups_item, **kwargs):
        """
        
        This method synchronizes a one or more groups with a task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_groups_to_task_with_http_info(process_id, task_id, task_sync_groups_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID (required)
        :param str task_id: ID of task to modify (required)
        :param TaskSyncGroupsItem task_sync_groups_item: JSON API response with groups IDs to sync (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'task_sync_groups_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_groups_to_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `sync_groups_to_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `sync_groups_to_task`")
        # verify the required parameter 'task_sync_groups_item' is set
        if ('task_sync_groups_item' not in params) or (params['task_sync_groups_item'] is None):
            raise ValueError("Missing the required parameter `task_sync_groups_item` when calling `sync_groups_to_task`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/groups'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_sync_groups_item' in params:
            body_params = params['task_sync_groups_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def sync_users_to_group(self, id, group_sync_users_item, **kwargs):
        """
        
        This method synchronizes one or more users with a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_users_to_group(id, group_sync_users_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to be modifieded (required)
        :param GroupSyncUsersItem group_sync_users_item: JSON API with array of users IDs to sync (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sync_users_to_group_with_http_info(id, group_sync_users_item, **kwargs)
        else:
            (data) = self.sync_users_to_group_with_http_info(id, group_sync_users_item, **kwargs)
            return data

    def sync_users_to_group_with_http_info(self, id, group_sync_users_item, **kwargs):
        """
        
        This method synchronizes one or more users with a group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sync_users_to_group_with_http_info(id, group_sync_users_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to be modifieded (required)
        :param GroupSyncUsersItem group_sync_users_item: JSON API with array of users IDs to sync (required)
        :return: ResultSuccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_sync_users_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_users_to_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sync_users_to_group`")
        # verify the required parameter 'group_sync_users_item' is set
        if ('group_sync_users_item' not in params) or (params['group_sync_users_item'] is None):
            raise ValueError("Missing the required parameter `group_sync_users_item` when calling `sync_users_to_group`")

        resource_path = '/groups/{id}/users'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_sync_users_item' in params:
            body_params = params['group_sync_users_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ResultSuccess',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_client(self, user_id, client_id, client_update_item, **kwargs):
        """
        
        This method updates an existing Oauth client.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_client(user_id, client_id, client_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of user to retrieve (required)
        :param str client_id: ID of client to retrieve (required)
        :param ClientUpdateItem client_update_item: Client object to edit (required)
        :return: ClientItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_client_with_http_info(user_id, client_id, client_update_item, **kwargs)
        else:
            (data) = self.update_client_with_http_info(user_id, client_id, client_update_item, **kwargs)
            return data

    def update_client_with_http_info(self, user_id, client_id, client_update_item, **kwargs):
        """
        
        This method updates an existing Oauth client.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_client_with_http_info(user_id, client_id, client_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: ID of user to retrieve (required)
        :param str client_id: ID of client to retrieve (required)
        :param ClientUpdateItem client_update_item: Client object to edit (required)
        :return: ClientItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'client_id', 'client_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_client`")
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_client`")
        # verify the required parameter 'client_update_item' is set
        if ('client_update_item' not in params) or (params['client_update_item'] is None):
            raise ValueError("Missing the required parameter `client_update_item` when calling `update_client`")

        resource_path = '/users/{user_id}/clients/{client_id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'client_update_item' in params:
            body_params = params['client_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ClientItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_event(self, process_id, event_id, event_update_item, **kwargs):
        """
        
        This method updates an existing event

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event(process_id, event_id, event_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to retrieve (required)
        :param str event_id: ID of event to retrieve (required)
        :param EventUpdateItem event_update_item: Event object to edit (required)
        :return: EventItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_event_with_http_info(process_id, event_id, event_update_item, **kwargs)
        else:
            (data) = self.update_event_with_http_info(process_id, event_id, event_update_item, **kwargs)
            return data

    def update_event_with_http_info(self, process_id, event_id, event_update_item, **kwargs):
        """
        
        This method updates an existing event

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event_with_http_info(process_id, event_id, event_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to retrieve (required)
        :param str event_id: ID of event to retrieve (required)
        :param EventUpdateItem event_update_item: Event object to edit (required)
        :return: EventItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'event_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_event`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `update_event`")
        # verify the required parameter 'event_update_item' is set
        if ('event_update_item' not in params) or (params['event_update_item'] is None):
            raise ValueError("Missing the required parameter `event_update_item` when calling `update_event`")

        resource_path = '/processes/{process_id}/events/{event_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_update_item' in params:
            body_params = params['event_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_event_connector(self, process_id, event_id, connector_id, event_connector_update_item, **kwargs):
        """
        
        This method lets update the existing Event connector with new parameters values

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event_connector(process_id, event_id, connector_id, event_connector_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Event to fetch (required)
        :param str connector_id: ID of Event Connector to fetch (required)
        :param EventConnectorUpdateItem event_connector_update_item: EventConnector object to edit (required)
        :return: EventConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_event_connector_with_http_info(process_id, event_id, connector_id, event_connector_update_item, **kwargs)
        else:
            (data) = self.update_event_connector_with_http_info(process_id, event_id, connector_id, event_connector_update_item, **kwargs)
            return data

    def update_event_connector_with_http_info(self, process_id, event_id, connector_id, event_connector_update_item, **kwargs):
        """
        
        This method lets update the existing Event connector with new parameters values

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_event_connector_with_http_info(process_id, event_id, connector_id, event_connector_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str event_id: ID of Event to fetch (required)
        :param str connector_id: ID of Event Connector to fetch (required)
        :param EventConnectorUpdateItem event_connector_update_item: EventConnector object to edit (required)
        :return: EventConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'event_id', 'connector_id', 'event_connector_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_event_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_event_connector`")
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params) or (params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `update_event_connector`")
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params) or (params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `update_event_connector`")
        # verify the required parameter 'event_connector_update_item' is set
        if ('event_connector_update_item' not in params) or (params['event_connector_update_item'] is None):
            raise ValueError("Missing the required parameter `event_connector_update_item` when calling `update_event_connector`")

        resource_path = '/processes/{process_id}/events/{event_id}/connectors/{connector_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'event_id' in params:
            path_params['event_id'] = params['event_id']
        if 'connector_id' in params:
            path_params['connector_id'] = params['connector_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_connector_update_item' in params:
            body_params = params['event_connector_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EventConnector1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_flow(self, process_id, flow_id, flow_update_item, **kwargs):
        """
        
        This method updates an existing flow.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_flow(process_id, flow_id, flow_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to retrieve (required)
        :param str flow_id: ID of flow to retrieve (required)
        :param FlowUpdateItem flow_update_item: Flow object to edit (required)
        :return: FlowItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_flow_with_http_info(process_id, flow_id, flow_update_item, **kwargs)
        else:
            (data) = self.update_flow_with_http_info(process_id, flow_id, flow_update_item, **kwargs)
            return data

    def update_flow_with_http_info(self, process_id, flow_id, flow_update_item, **kwargs):
        """
        
        This method updates an existing flow.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_flow_with_http_info(process_id, flow_id, flow_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to retrieve (required)
        :param str flow_id: ID of flow to retrieve (required)
        :param FlowUpdateItem flow_update_item: Flow object to edit (required)
        :return: FlowItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'flow_id', 'flow_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_flow`")
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `update_flow`")
        # verify the required parameter 'flow_update_item' is set
        if ('flow_update_item' not in params) or (params['flow_update_item'] is None):
            raise ValueError("Missing the required parameter `flow_update_item` when calling `update_flow`")

        resource_path = '/processes/{process_id}/flows/{flow_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'flow_id' in params:
            path_params['flow_id'] = params['flow_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flow_update_item' in params:
            body_params = params['flow_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FlowItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_gateway(self, process_id, gateway_id, gateway_update_item, **kwargs):
        """
        
        This method updates an existing gateway.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_gateway(process_id, gateway_id, gateway_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to retrieve (required)
        :param str gateway_id: ID of gateway to retrieve (required)
        :param GatewayUpdateItem gateway_update_item: Gateway object to edit (required)
        :return: GatewayItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_gateway_with_http_info(process_id, gateway_id, gateway_update_item, **kwargs)
        else:
            (data) = self.update_gateway_with_http_info(process_id, gateway_id, gateway_update_item, **kwargs)
            return data

    def update_gateway_with_http_info(self, process_id, gateway_id, gateway_update_item, **kwargs):
        """
        
        This method updates an existing gateway.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_gateway_with_http_info(process_id, gateway_id, gateway_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of process to retrieve (required)
        :param str gateway_id: ID of gateway to retrieve (required)
        :param GatewayUpdateItem gateway_update_item: Gateway object to edit (required)
        :return: GatewayItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'gateway_id', 'gateway_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_gateway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_gateway`")
        # verify the required parameter 'gateway_id' is set
        if ('gateway_id' not in params) or (params['gateway_id'] is None):
            raise ValueError("Missing the required parameter `gateway_id` when calling `update_gateway`")
        # verify the required parameter 'gateway_update_item' is set
        if ('gateway_update_item' not in params) or (params['gateway_update_item'] is None):
            raise ValueError("Missing the required parameter `gateway_update_item` when calling `update_gateway`")

        resource_path = '/processes/{process_id}/gateways/{gateway_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'gateway_id' in params:
            path_params['gateway_id'] = params['gateway_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'gateway_update_item' in params:
            body_params = params['gateway_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GatewayItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_group(self, id, group_update_item, **kwargs):
        """
        
        This method updates an existing group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_group(id, group_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to retrieve (required)
        :param GroupUpdateItem group_update_item: Group object to edit (required)
        :return: GroupItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_group_with_http_info(id, group_update_item, **kwargs)
        else:
            (data) = self.update_group_with_http_info(id, group_update_item, **kwargs)
            return data

    def update_group_with_http_info(self, id, group_update_item, **kwargs):
        """
        
        This method updates an existing group.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_group_with_http_info(id, group_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of group to retrieve (required)
        :param GroupUpdateItem group_update_item: Group object to edit (required)
        :return: GroupItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_group`")
        # verify the required parameter 'group_update_item' is set
        if ('group_update_item' not in params) or (params['group_update_item'] is None):
            raise ValueError("Missing the required parameter `group_update_item` when calling `update_group`")

        resource_path = '/groups/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'group_update_item' in params:
            body_params = params['group_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GroupItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_input_output(self, process_id, task_id, inputoutput_uid, input_output_update_item, **kwargs):
        """
        
        This method updates an existing Input/Output object.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_input_output(process_id, task_id, inputoutput_uid, input_output_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the Input/Output object (required)
        :param str task_id: Task instance ID related to the Input/Output object (required)
        :param str inputoutput_uid: ID of Input/Output to retrieve (required)
        :param InputOutputUpdateItem input_output_update_item: Input/Output object to edit (required)
        :return: InputOutputItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_input_output_with_http_info(process_id, task_id, inputoutput_uid, input_output_update_item, **kwargs)
        else:
            (data) = self.update_input_output_with_http_info(process_id, task_id, inputoutput_uid, input_output_update_item, **kwargs)
            return data

    def update_input_output_with_http_info(self, process_id, task_id, inputoutput_uid, input_output_update_item, **kwargs):
        """
        
        This method updates an existing Input/Output object.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_input_output_with_http_info(process_id, task_id, inputoutput_uid, input_output_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: Process ID related to the Input/Output object (required)
        :param str task_id: Task instance ID related to the Input/Output object (required)
        :param str inputoutput_uid: ID of Input/Output to retrieve (required)
        :param InputOutputUpdateItem input_output_update_item: Input/Output object to edit (required)
        :return: InputOutputItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'inputoutput_uid', 'input_output_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_input_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_input_output`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `update_input_output`")
        # verify the required parameter 'inputoutput_uid' is set
        if ('inputoutput_uid' not in params) or (params['inputoutput_uid'] is None):
            raise ValueError("Missing the required parameter `inputoutput_uid` when calling `update_input_output`")
        # verify the required parameter 'input_output_update_item' is set
        if ('input_output_update_item' not in params) or (params['input_output_update_item'] is None):
            raise ValueError("Missing the required parameter `input_output_update_item` when calling `update_input_output`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']
        if 'inputoutput_uid' in params:
            path_params['inputoutput_uid'] = params['inputoutput_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input_output_update_item' in params:
            body_params = params['input_output_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InputOutputItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_instance(self, process_id, instance_id, instance_update_item, **kwargs):
        """
        
        This method updates  an existing instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_instance(process_id, instance_id, instance_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to retrieve (required)
        :param str instance_id: ID of Instance to retrieve (required)
        :param InstanceUpdateItem instance_update_item: Instance object to edit (required)
        :return: InstanceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_instance_with_http_info(process_id, instance_id, instance_update_item, **kwargs)
        else:
            (data) = self.update_instance_with_http_info(process_id, instance_id, instance_update_item, **kwargs)
            return data

    def update_instance_with_http_info(self, process_id, instance_id, instance_update_item, **kwargs):
        """
        
        This method updates  an existing instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_instance_with_http_info(process_id, instance_id, instance_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to retrieve (required)
        :param str instance_id: ID of Instance to retrieve (required)
        :param InstanceUpdateItem instance_update_item: Instance object to edit (required)
        :return: InstanceItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'instance_id', 'instance_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_instance`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `update_instance`")
        # verify the required parameter 'instance_update_item' is set
        if ('instance_update_item' not in params) or (params['instance_update_item'] is None):
            raise ValueError("Missing the required parameter `instance_update_item` when calling `update_instance`")

        resource_path = '/processes/{process_id}/instances/{instance_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'instance_id' in params:
            path_params['instance_id'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'instance_update_item' in params:
            body_params = params['instance_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_process(self, id, process_update_item, **kwargs):
        """
        
        This method updates an existing process.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_process(id, process_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of process to retrieve (required)
        :param ProcessUpdateItem process_update_item: Process object to edit (required)
        :return: ProcessItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_process_with_http_info(id, process_update_item, **kwargs)
        else:
            (data) = self.update_process_with_http_info(id, process_update_item, **kwargs)
            return data

    def update_process_with_http_info(self, id, process_update_item, **kwargs):
        """
        
        This method updates an existing process.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_process_with_http_info(id, process_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of process to retrieve (required)
        :param ProcessUpdateItem process_update_item: Process object to edit (required)
        :return: ProcessItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'process_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_process`")
        # verify the required parameter 'process_update_item' is set
        if ('process_update_item' not in params) or (params['process_update_item'] is None):
            raise ValueError("Missing the required parameter `process_update_item` when calling `update_process`")

        resource_path = '/processes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'process_update_item' in params:
            body_params = params['process_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProcessItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_task(self, process_id, task_id, task_update_item, **kwargs):
        """
        
        This method is intended for updating an existing task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task(process_id, task_id, task_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param TaskUpdateItem task_update_item: Task object to edit (required)
        :return: TaskItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_task_with_http_info(process_id, task_id, task_update_item, **kwargs)
        else:
            (data) = self.update_task_with_http_info(process_id, task_id, task_update_item, **kwargs)
            return data

    def update_task_with_http_info(self, process_id, task_id, task_update_item, **kwargs):
        """
        
        This method is intended for updating an existing task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_with_http_info(process_id, task_id, task_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param TaskUpdateItem task_update_item: Task object to edit (required)
        :return: TaskItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'task_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_task`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `update_task`")
        # verify the required parameter 'task_update_item' is set
        if ('task_update_item' not in params) or (params['task_update_item'] is None):
            raise ValueError("Missing the required parameter `task_update_item` when calling `update_task`")

        resource_path = '/processes/{process_id}/tasks/{task_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_update_item' in params:
            body_params = params['task_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_task_connector(self, process_id, task_id, connector_id, task_connector_update_item, **kwargs):
        """
        
        This method lets update the existing Task connector with new parameters values

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_connector(process_id, task_id, connector_id, task_connector_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param str connector_id: ID of Task Connector to fetch (required)
        :param TaskConnectorUpdateItem task_connector_update_item: TaskConnector object to edit (required)
        :return: TaskConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_task_connector_with_http_info(process_id, task_id, connector_id, task_connector_update_item, **kwargs)
        else:
            (data) = self.update_task_connector_with_http_info(process_id, task_id, connector_id, task_connector_update_item, **kwargs)
            return data

    def update_task_connector_with_http_info(self, process_id, task_id, connector_id, task_connector_update_item, **kwargs):
        """
        
        This method lets update the existing Task connector with new parameters values

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_connector_with_http_info(process_id, task_id, connector_id, task_connector_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str process_id: ID of Process to fetch (required)
        :param str task_id: ID of Task to fetch (required)
        :param str connector_id: ID of Task Connector to fetch (required)
        :param TaskConnectorUpdateItem task_connector_update_item: TaskConnector object to edit (required)
        :return: TaskConnector1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id', 'task_id', 'connector_id', 'task_connector_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_connector" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params) or (params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `update_task_connector`")
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `update_task_connector`")
        # verify the required parameter 'connector_id' is set
        if ('connector_id' not in params) or (params['connector_id'] is None):
            raise ValueError("Missing the required parameter `connector_id` when calling `update_task_connector`")
        # verify the required parameter 'task_connector_update_item' is set
        if ('task_connector_update_item' not in params) or (params['task_connector_update_item'] is None):
            raise ValueError("Missing the required parameter `task_connector_update_item` when calling `update_task_connector`")

        resource_path = '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}'.replace('{format}', 'json')
        path_params = {}
        if 'process_id' in params:
            path_params['process_id'] = params['process_id']
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']
        if 'connector_id' in params:
            path_params['connector_id'] = params['connector_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_connector_update_item' in params:
            body_params = params['task_connector_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TaskConnector1',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_task_instance(self, task_instance_id, task_instance_update_item, **kwargs):
        """
        
        This method updates an existing task instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_instance(task_instance_id, task_instance_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str task_instance_id: ID of task instance to retrieve (required)
        :param TaskInstanceUpdateItem task_instance_update_item: Task Instance object to update (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_task_instance_with_http_info(task_instance_id, task_instance_update_item, **kwargs)
        else:
            (data) = self.update_task_instance_with_http_info(task_instance_id, task_instance_update_item, **kwargs)
            return data

    def update_task_instance_with_http_info(self, task_instance_id, task_instance_update_item, **kwargs):
        """
        
        This method updates an existing task instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_task_instance_with_http_info(task_instance_id, task_instance_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str task_instance_id: ID of task instance to retrieve (required)
        :param TaskInstanceUpdateItem task_instance_update_item: Task Instance object to update (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_instance_id', 'task_instance_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_instance_id' is set
        if ('task_instance_id' not in params) or (params['task_instance_id'] is None):
            raise ValueError("Missing the required parameter `task_instance_id` when calling `update_task_instance`")
        # verify the required parameter 'task_instance_update_item' is set
        if ('task_instance_update_item' not in params) or (params['task_instance_update_item'] is None):
            raise ValueError("Missing the required parameter `task_instance_update_item` when calling `update_task_instance`")

        resource_path = '/task_instances/{task_instance_id}'.replace('{format}', 'json')
        path_params = {}
        if 'task_instance_id' in params:
            path_params['task_instance_id'] = params['task_instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_instance_update_item' in params:
            body_params = params['task_instance_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_user(self, id, user_update_item, **kwargs):
        """
        
        This method updates an existing user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user(id, user_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of user to retrieve (required)
        :param UserUpdateItem user_update_item: User object for update (required)
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_user_with_http_info(id, user_update_item, **kwargs)
        else:
            (data) = self.update_user_with_http_info(id, user_update_item, **kwargs)
            return data

    def update_user_with_http_info(self, id, user_update_item, **kwargs):
        """
        
        This method updates an existing user.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_user_with_http_info(id, user_update_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ID of user to retrieve (required)
        :param UserUpdateItem user_update_item: User object for update (required)
        :return: UserItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_update_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_user`")
        # verify the required parameter 'user_update_item' is set
        if ('user_update_item' not in params) or (params['user_update_item'] is None):
            raise ValueError("Missing the required parameter `user_update_item` when calling `update_user`")

        resource_path = '/users/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_update_item' in params:
            body_params = params['user_update_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/vnd.api+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/vnd.api+json'])

        # Authentication setting
        auth_settings = ['PasswordGrant']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
